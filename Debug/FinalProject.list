
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009534  08009534  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800953c  0800953c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  20000098  080095dc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  080095dc  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df46  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d91  00000000  00000000  0003e00e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001888  00000000  00000000  00041da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  00043628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000256f4  00000000  00000000  00044d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014ebc  00000000  00000000  0006a40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3bb6  00000000  00000000  0007f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f4  00000000  00000000  00152efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009500 	.word	0x08009500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009500 	.word	0x08009500

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f008 f972 	bl	80087e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000030 	.word	0x20000030
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c8 	.word	0x200000c8

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000c8 	.word	0x200000c8

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b02      	cmp	r3, #2
 8000824:	d004      	beq.n	8000830 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e00c      	b.n	800084a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2205      	movs	r2, #5
 8000834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0201 	bic.w	r2, r2, #1
 8000846:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e16b      	b.n	8000b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 815a 	bne.w	8000b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x4a>
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00b      	beq.n	800093e <HAL_GPIO_Init+0xe6>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000932:	2b11      	cmp	r3, #17
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d130      	bne.n	80009a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80b4 	beq.w	8000b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a5e      	ldr	r2, [pc, #376]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b5c      	ldr	r3, [pc, #368]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009fa:	4a5a      	ldr	r2, [pc, #360]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <HAL_GPIO_Init+0x310>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d02b      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a50      	ldr	r2, [pc, #320]	; (8000b6c <HAL_GPIO_Init+0x314>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d025      	beq.n	8000a7a <HAL_GPIO_Init+0x222>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_GPIO_Init+0x318>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d01f      	beq.n	8000a76 <HAL_GPIO_Init+0x21e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <HAL_GPIO_Init+0x31c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d019      	beq.n	8000a72 <HAL_GPIO_Init+0x21a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4d      	ldr	r2, [pc, #308]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x216>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4c      	ldr	r2, [pc, #304]	; (8000b7c <HAL_GPIO_Init+0x324>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <HAL_GPIO_Init+0x328>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x20e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <HAL_GPIO_Init+0x32c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x20a>
 8000a5e:	2307      	movs	r3, #7
 8000a60:	e00e      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a62:	2308      	movs	r3, #8
 8000a64:	e00c      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a66:	2306      	movs	r3, #6
 8000a68:	e00a      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac2:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aec:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f ae90 	bls.w	8000874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40021c00 	.word	0x40021c00
 8000b88:	40013c00 	.word	0x40013c00

08000b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd8:	e003      	b.n	8000be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	041a      	lsls	r2, r3, #16
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	619a      	str	r2, [r3, #24]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	401a      	ands	r2, r3
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d104      	bne.n	8000c12 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	041a      	lsls	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	b08f      	sub	sp, #60	; 0x3c
 8000c28:	af0a      	add	r7, sp, #40	; 0x28
 8000c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e054      	b.n	8000ce0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d106      	bne.n	8000c56 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f008 f8a9 	bl	8008da8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fc89 	bl	800558c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	687e      	ldr	r6, [r7, #4]
 8000c82:	466d      	mov	r5, sp
 8000c84:	f106 0410 	add.w	r4, r6, #16
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c98:	1d33      	adds	r3, r6, #4
 8000c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9c:	6838      	ldr	r0, [r7, #0]
 8000c9e:	f004 fc03 	bl	80054a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fc80 	bl	80055ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	687e      	ldr	r6, [r7, #4]
 8000cb6:	466d      	mov	r5, sp
 8000cb8:	f106 0410 	add.w	r4, r6, #16
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ccc:	1d33      	adds	r3, r6, #4
 8000cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cd0:	6838      	ldr	r0, [r7, #0]
 8000cd2:	f004 fd93 	bl	80057fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af04      	add	r7, sp, #16
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	70fb      	strb	r3, [r7, #3]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70bb      	strb	r3, [r7, #2]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_HCD_HC_Init+0x28>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e07f      	b.n	8000e10 <HAL_HCD_HC_Init+0x128>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	333d      	adds	r3, #61	; 0x3d
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	3338      	adds	r3, #56	; 0x38
 8000d3c:	787a      	ldrb	r2, [r7, #1]
 8000d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3340      	adds	r3, #64	; 0x40
 8000d50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d52:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3339      	adds	r3, #57	; 0x39
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	333f      	adds	r3, #63	; 0x3f
 8000d78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d7e:	78fa      	ldrb	r2, [r7, #3]
 8000d80:	78bb      	ldrb	r3, [r7, #2]
 8000d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d86:	b2d8      	uxtb	r0, r3
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	333a      	adds	r3, #58	; 0x3a
 8000d96:	4602      	mov	r2, r0
 8000d98:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da0a      	bge.n	8000db8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	333b      	adds	r3, #59	; 0x3b
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e009      	b.n	8000dcc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	333b      	adds	r3, #59	; 0x3b
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	333c      	adds	r3, #60	; 0x3c
 8000ddc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000de0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	787c      	ldrb	r4, [r7, #1]
 8000de8:	78ba      	ldrb	r2, [r7, #2]
 8000dea:	78f9      	ldrb	r1, [r7, #3]
 8000dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	f004 fe7f 	bl	8005b00 <USB_HC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_HCD_HC_Halt+0x1e>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e00f      	b.n	8000e56 <HAL_HCD_HC_Halt+0x3e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f8b9 	bl	8005fbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	70fb      	strb	r3, [r7, #3]
 8000e72:	460b      	mov	r3, r1
 8000e74:	70bb      	strb	r3, [r7, #2]
 8000e76:	4613      	mov	r3, r2
 8000e78:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	333b      	adds	r3, #59	; 0x3b
 8000e8a:	78ba      	ldrb	r2, [r7, #2]
 8000e8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	333f      	adds	r3, #63	; 0x3f
 8000e9e:	787a      	ldrb	r2, [r7, #1]
 8000ea0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000ea2:	7c3b      	ldrb	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3342      	adds	r3, #66	; 0x42
 8000eb8:	2203      	movs	r2, #3
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e009      	b.n	8000ed2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3342      	adds	r3, #66	; 0x42
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	f200 80d6 	bhi.w	8001086 <HAL_HCD_HC_SubmitRequest+0x226>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08001071 	.word	0x08001071
 8000ee8:	08000f5d 	.word	0x08000f5d
 8000eec:	08000fe7 	.word	0x08000fe7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000ef0:	7c3b      	ldrb	r3, [r7, #16]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	f040 80c9 	bne.w	800108a <HAL_HCD_HC_SubmitRequest+0x22a>
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f040 80c5 	bne.w	800108a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3351      	adds	r3, #81	; 0x51
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	3351      	adds	r3, #81	; 0x51
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10a      	bne.n	8000f46 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3342      	adds	r3, #66	; 0x42
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f44:	e0a1      	b.n	800108a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f46:	78fa      	ldrb	r2, [r7, #3]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3342      	adds	r3, #66	; 0x42
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
      break;
 8000f5a:	e096      	b.n	800108a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d120      	bne.n	8000fa4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	3351      	adds	r3, #81	; 0x51
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10a      	bne.n	8000f8e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3342      	adds	r3, #66	; 0x42
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f8c:	e07e      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3342      	adds	r3, #66	; 0x42
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
      break;
 8000fa2:	e073      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fa4:	78fa      	ldrb	r2, [r7, #3]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3350      	adds	r3, #80	; 0x50
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10a      	bne.n	8000fd0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3342      	adds	r3, #66	; 0x42
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
      break;
 8000fce:	e05d      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3342      	adds	r3, #66	; 0x42
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	701a      	strb	r2, [r3, #0]
      break;
 8000fe4:	e052      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000fe6:	78bb      	ldrb	r3, [r7, #2]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d120      	bne.n	800102e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3351      	adds	r3, #81	; 0x51
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10a      	bne.n	8001018 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001002:	78fa      	ldrb	r2, [r7, #3]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	3342      	adds	r3, #66	; 0x42
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001016:	e039      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	3342      	adds	r3, #66	; 0x42
 8001028:	2202      	movs	r2, #2
 800102a:	701a      	strb	r2, [r3, #0]
      break;
 800102c:	e02e      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	3350      	adds	r3, #80	; 0x50
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10a      	bne.n	800105a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3342      	adds	r3, #66	; 0x42
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
      break;
 8001058:	e018      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800105a:	78fa      	ldrb	r2, [r7, #3]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3342      	adds	r3, #66	; 0x42
 800106a:	2202      	movs	r2, #2
 800106c:	701a      	strb	r2, [r3, #0]
      break;
 800106e:	e00d      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3342      	adds	r3, #66	; 0x42
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
      break;
 8001084:	e002      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800108a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3344      	adds	r3, #68	; 0x44
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	8b39      	ldrh	r1, [r7, #24]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4403      	add	r3, r0
 80010b0:	3348      	adds	r3, #72	; 0x48
 80010b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	335c      	adds	r3, #92	; 0x5c
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80010c8:	78fa      	ldrb	r2, [r7, #3]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	334c      	adds	r3, #76	; 0x4c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3339      	adds	r3, #57	; 0x39
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	335d      	adds	r3, #93	; 0x5d
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	3338      	adds	r3, #56	; 0x38
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	18d1      	adds	r1, r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	f004 fdf8 	bl	8005d14 <USB_HC_StartXfer>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop

08001130 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f004 fb15 	bl	8005776 <USB_GetMode>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	f040 80f1 	bne.w	8001336 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f004 faf9 	bl	8005750 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80e7 	beq.w	8001334 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 faf0 	bl	8005750 <USB_ReadInterrupts>
 8001170:	4603      	mov	r3, r0
 8001172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800117a:	d104      	bne.n	8001186 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001184:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fae0 	bl	8005750 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800119a:	d104      	bne.n	80011a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fad0 	bl	8005750 <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011ba:	d104      	bne.n	80011c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fac0 	bl	8005750 <USB_ReadInterrupts>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d103      	bne.n	80011e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fab2 	bl	8005750 <USB_ReadInterrupts>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f6:	d117      	bne.n	8001228 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001206:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800120a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f007 fe49 	bl	8008ea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fbab 	bl	8005974 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f004 fa8f 	bl	8005750 <USB_ReadInterrupts>
 8001232:	4603      	mov	r3, r0
 8001234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d102      	bne.n	8001244 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 f8c8 	bl	80023d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fa81 	bl	8005750 <USB_ReadInterrupts>
 800124e:	4603      	mov	r3, r0
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b08      	cmp	r3, #8
 8001256:	d106      	bne.n	8001266 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fe07 	bl	8008e6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2208      	movs	r2, #8
 8001264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fa70 	bl	8005750 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800127a:	d138      	bne.n	80012ee <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f004 fe8b 	bl	8005f9c <USB_HC_ReadInterrupt>
 8001286:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e025      	b.n	80012da <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d018      	beq.n	80012d4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b8:	d106      	bne.n	80012c8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f8cf 	bl	8001464 <HCD_HC_IN_IRQHandler>
 80012c6:	e005      	b.n	80012d4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fc5f 	bl	8001b92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3d4      	bcc.n	800128e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fa2c 	bl	8005750 <USB_ReadInterrupts>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d101      	bne.n	8001306 <HAL_HCD_IRQHandler+0x1d6>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_HCD_IRQHandler+0x1d8>
 8001306:	2300      	movs	r3, #0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d014      	beq.n	8001336 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0210 	bic.w	r2, r2, #16
 800131a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 ffad 	bl	800227c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0210 	orr.w	r2, r2, #16
 8001330:	619a      	str	r2, [r3, #24]
 8001332:	e000      	b.n	8001336 <HAL_HCD_IRQHandler+0x206>
      return;
 8001334:	bf00      	nop
    }
  }
}
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_HCD_Start+0x16>
 800134e:	2302      	movs	r3, #2
 8001350:	e013      	b.n	800137a <HAL_HCD_Start+0x3e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f004 f903 	bl	800556a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fb66 	bl	8005a3c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_HCD_Stop+0x16>
 8001394:	2302      	movs	r3, #2
 8001396:	e00d      	b.n	80013b4 <HAL_HCD_Stop+0x32>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 ff45 	bl	8006234 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fb0d 	bl	80059e8 <USB_ResetPort>
 80013ce:	4603      	mov	r3, r0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	335c      	adds	r3, #92	; 0x5c
 80013f4:	781b      	ldrb	r3, [r3, #0]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800140e:	78fa      	ldrb	r2, [r7, #3]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	334c      	adds	r3, #76	; 0x4c
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fb4f 	bl	8005adc <USB_GetCurrentFrame>
 800143e:	4603      	mov	r3, r0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fb2a 	bl	8005aae <USB_GetHostSpeed>
 800145a:	4603      	mov	r3, r0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4413      	add	r3, r2
 8001486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b04      	cmp	r3, #4
 8001492:	d119      	bne.n	80014c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a0:	461a      	mov	r2, r3
 80014a2:	2304      	movs	r3, #4
 80014a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	0151      	lsls	r1, r2, #5
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	440a      	add	r2, r1
 80014bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	60d3      	str	r3, [r2, #12]
 80014c6:	e095      	b.n	80015f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d109      	bne.n	80014f2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ea:	461a      	mov	r2, r3
 80014ec:	2320      	movs	r3, #32
 80014ee:	6093      	str	r3, [r2, #8]
 80014f0:	e080      	b.n	80015f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b08      	cmp	r3, #8
 8001506:	d134      	bne.n	8001572 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	0151      	lsls	r1, r2, #5
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	440a      	add	r2, r1
 800151e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	335d      	adds	r3, #93	; 0x5d
 8001538:	2205      	movs	r2, #5
 800153a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001548:	461a      	mov	r2, r3
 800154a:	2310      	movs	r3, #16
 800154c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	461a      	mov	r2, r3
 800155c:	2308      	movs	r3, #8
 800155e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fd27 	bl	8005fbe <USB_HC_Halt>
 8001570:	e040      	b.n	80015f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4413      	add	r3, r2
 800157a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001588:	d134      	bne.n	80015f4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4413      	add	r3, r2
 8001592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	0151      	lsls	r1, r2, #5
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	440a      	add	r2, r1
 80015a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fd02 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c6:	461a      	mov	r2, r3
 80015c8:	2310      	movs	r3, #16
 80015ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	335d      	adds	r3, #93	; 0x5d
 80015dc:	2208      	movs	r2, #8
 80015de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ec:	461a      	mov	r2, r3
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160a:	d122      	bne.n	8001652 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	0151      	lsls	r1, r2, #5
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	440a      	add	r2, r1
 8001622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fcc1 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4413      	add	r3, r2
 8001644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001648:	461a      	mov	r2, r3
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001650:	e29b      	b.n	8001b8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4413      	add	r3, r2
 800165a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 80c1 	bne.w	80017ec <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01b      	beq.n	80016aa <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	3348      	adds	r3, #72	; 0x48
 8001682:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	0159      	lsls	r1, r3, #5
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	440b      	add	r3, r1
 800168c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001696:	1ad1      	subs	r1, r2, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4403      	add	r3, r0
 80016a6:	334c      	adds	r3, #76	; 0x4c
 80016a8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	335d      	adds	r3, #93	; 0x5d
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	3358      	adds	r3, #88	; 0x58
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016de:	461a      	mov	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	333f      	adds	r3, #63	; 0x3f
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	333f      	adds	r3, #63	; 0x3f
 800170a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800170c:	2b02      	cmp	r3, #2
 800170e:	d121      	bne.n	8001754 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4413      	add	r3, r2
 8001718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	0151      	lsls	r1, r2, #5
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	440a      	add	r2, r1
 8001726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fc3f 	bl	8005fbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	015a      	lsls	r2, r3, #5
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4413      	add	r3, r2
 8001748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174c:	461a      	mov	r2, r3
 800174e:	2310      	movs	r3, #16
 8001750:	6093      	str	r3, [r2, #8]
 8001752:	e034      	b.n	80017be <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	333f      	adds	r3, #63	; 0x3f
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d129      	bne.n	80017be <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	0151      	lsls	r1, r2, #5
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	440a      	add	r2, r1
 8001780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001788:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	335c      	adds	r3, #92	; 0x5c
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	b2d8      	uxtb	r0, r3
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	335c      	adds	r3, #92	; 0x5c
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4601      	mov	r1, r0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 fb81 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3350      	adds	r3, #80	; 0x50
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2d8      	uxtb	r0, r3
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3350      	adds	r3, #80	; 0x50
 80017e6:	4602      	mov	r2, r0
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	e1ce      	b.n	8001b8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f040 80f1 	bne.w	80019e6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	440a      	add	r2, r1
 800181a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800181e:	f023 0302 	bic.w	r3, r3, #2
 8001822:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	335d      	adds	r3, #93	; 0x5d
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10a      	bne.n	8001850 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	335c      	adds	r3, #92	; 0x5c
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e0b0      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	335d      	adds	r3, #93	; 0x5d
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d10a      	bne.n	800187c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	335c      	adds	r3, #92	; 0x5c
 8001876:	2205      	movs	r2, #5
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e09a      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	335d      	adds	r3, #93	; 0x5d
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b06      	cmp	r3, #6
 8001890:	d00a      	beq.n	80018a8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	335d      	adds	r3, #93	; 0x5d
 80018a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d156      	bne.n	8001956 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3358      	adds	r3, #88	; 0x58
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4403      	add	r3, r0
 80018ca:	3358      	adds	r3, #88	; 0x58
 80018cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3358      	adds	r3, #88	; 0x58
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d914      	bls.n	800190e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3358      	adds	r3, #88	; 0x58
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	335c      	adds	r3, #92	; 0x5c
 8001908:	2204      	movs	r2, #4
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e009      	b.n	8001922 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	335c      	adds	r3, #92	; 0x5c
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001938:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001940:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4413      	add	r3, r2
 800194a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e02d      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	335d      	adds	r3, #93	; 0x5d
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d122      	bne.n	80019b2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	335c      	adds	r3, #92	; 0x5c
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001996:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800199e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	461a      	mov	r2, r3
 80019c0:	2302      	movs	r3, #2
 80019c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	b2d8      	uxtb	r0, r3
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	335c      	adds	r3, #92	; 0x5c
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4601      	mov	r1, r0
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f007 fa6e 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019e4:	e0d1      	b.n	8001b8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d13e      	bne.n	8001a7a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	0151      	lsls	r1, r2, #5
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	440a      	add	r2, r1
 8001a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3358      	adds	r3, #88	; 0x58
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4403      	add	r3, r0
 8001a3e:	3358      	adds	r3, #88	; 0x58
 8001a40:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	335d      	adds	r3, #93	; 0x5d
 8001a52:	2206      	movs	r2, #6
 8001a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 faac 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a72:	461a      	mov	r2, r3
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	6093      	str	r3, [r2, #8]
}
 8001a78:	e087      	b.n	8001b8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d17c      	bne.n	8001b8a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	333f      	adds	r3, #63	; 0x3f
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d122      	bne.n	8001aec <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3358      	adds	r3, #88	; 0x58
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	0151      	lsls	r1, r2, #5
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	440a      	add	r2, r1
 8001ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fa6a 	bl	8005fbe <USB_HC_Halt>
 8001aea:	e045      	b.n	8001b78 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	333f      	adds	r3, #63	; 0x3f
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	333f      	adds	r3, #63	; 0x3f
 8001b12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d12f      	bne.n	8001b78 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3358      	adds	r3, #88	; 0x58
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d121      	bne.n	8001b78 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	335d      	adds	r3, #93	; 0x5d
 8001b44:	2203      	movs	r2, #3
 8001b46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	0151      	lsls	r1, r2, #5
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fa23 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	461a      	mov	r2, r3
 8001b86:	2310      	movs	r3, #16
 8001b88:	6093      	str	r3, [r2, #8]
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d119      	bne.n	8001bf6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bf4:	e33e      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d141      	bne.n	8001c90 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	333d      	adds	r3, #61	; 0x3d
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	f040 831f 	bne.w	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	333d      	adds	r3, #61	; 0x3d
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	335c      	adds	r3, #92	; 0x5c
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	0151      	lsls	r1, r2, #5
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	440a      	add	r2, r1
 8001c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 f998 	bl	8005fbe <USB_HC_Halt>
}
 8001c8e:	e2f1      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d13f      	bne.n	8001d26 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	335d      	adds	r3, #93	; 0x5d
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333d      	adds	r3, #61	; 0x3d
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3358      	adds	r3, #88	; 0x58
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 f956 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2340      	movs	r3, #64	; 0x40
 8001d22:	6093      	str	r3, [r2, #8]
}
 8001d24:	e2a6      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d122      	bne.n	8001d84 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	0151      	lsls	r1, r2, #5
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	440a      	add	r2, r1
 8001d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f928 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d80:	6093      	str	r3, [r2, #8]
}
 8001d82:	e277      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d135      	bne.n	8001e06 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3358      	adds	r3, #88	; 0x58
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	0151      	lsls	r1, r2, #5
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	440a      	add	r2, r1
 8001dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f8f0 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	335d      	adds	r3, #93	; 0x5d
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
}
 8001e04:	e236      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d12b      	bne.n	8001e74 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	0151      	lsls	r1, r2, #5
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	440a      	add	r2, r1
 8001e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 f8b0 	bl	8005fbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	335d      	adds	r3, #93	; 0x5d
 8001e6e:	2205      	movs	r2, #5
 8001e70:	701a      	strb	r2, [r3, #0]
}
 8001e72:	e1ff      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d155      	bne.n	8001f36 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3358      	adds	r3, #88	; 0x58
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	335d      	adds	r3, #93	; 0x5d
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	333d      	adds	r3, #61	; 0x3d
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d114      	bne.n	8001ef2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333c      	adds	r3, #60	; 0x3c
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	333d      	adds	r3, #61	; 0x3d
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 f84e 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2310      	movs	r3, #16
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	e19e      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d12b      	bne.n	8001fa4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	0151      	lsls	r1, r2, #5
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	440a      	add	r2, r1
 8001f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 f821 	bl	8005fbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	335d      	adds	r3, #93	; 0x5d
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	6093      	str	r3, [r2, #8]
}
 8001fa2:	e167      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d135      	bne.n	8002028 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	0151      	lsls	r1, r2, #5
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	440a      	add	r2, r1
 8001fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 ffe9 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	461a      	mov	r2, r3
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	335d      	adds	r3, #93	; 0x5d
 8002022:	2208      	movs	r2, #8
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	e125      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	f040 811a 	bne.w	8002274 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	440a      	add	r2, r1
 8002056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	335d      	adds	r3, #93	; 0x5d
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d137      	bne.n	80020e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335c      	adds	r3, #92	; 0x5c
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	333f      	adds	r3, #63	; 0x3f
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d00b      	beq.n	80020b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	333f      	adds	r3, #63	; 0x3f
 80020b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	f040 80c5 	bne.w	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	3351      	adds	r3, #81	; 0x51
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2d8      	uxtb	r0, r3
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	3351      	adds	r3, #81	; 0x51
 80020e0:	4602      	mov	r2, r0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e0ad      	b.n	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	335d      	adds	r3, #93	; 0x5d
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d10a      	bne.n	8002112 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	335c      	adds	r3, #92	; 0x5c
 800210c:	2202      	movs	r2, #2
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e097      	b.n	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	335d      	adds	r3, #93	; 0x5d
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d10a      	bne.n	800213e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	335c      	adds	r3, #92	; 0x5c
 8002138:	2202      	movs	r2, #2
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e081      	b.n	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	335d      	adds	r3, #93	; 0x5d
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d10a      	bne.n	800216a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	335c      	adds	r3, #92	; 0x5c
 8002164:	2205      	movs	r2, #5
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e06b      	b.n	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	335d      	adds	r3, #93	; 0x5d
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d00a      	beq.n	8002196 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	335d      	adds	r3, #93	; 0x5d
 8002190:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002192:	2b08      	cmp	r3, #8
 8002194:	d155      	bne.n	8002242 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4403      	add	r3, r0
 80021b8:	3358      	adds	r3, #88	; 0x58
 80021ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3358      	adds	r3, #88	; 0x58
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d914      	bls.n	80021fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	3358      	adds	r3, #88	; 0x58
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	335c      	adds	r3, #92	; 0x5c
 80021f6:	2204      	movs	r2, #4
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e009      	b.n	8002210 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002226:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2302      	movs	r3, #2
 8002252:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	b2d8      	uxtb	r0, r3
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	335c      	adds	r3, #92	; 0x5c
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	4601      	mov	r1, r0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f006 fe26 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	0c5b      	lsrs	r3, r3, #17
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d003      	beq.n	80022c0 <HCD_RXQLVL_IRQHandler+0x44>
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	f000 8082 	beq.w	80023c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80022be:	e083      	b.n	80023c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07f      	beq.n	80023c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	3344      	adds	r3, #68	; 0x44
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d074      	beq.n	80023c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3344      	adds	r3, #68	; 0x44
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	b292      	uxth	r2, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f003 fa01 	bl	80056fe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3344      	adds	r3, #68	; 0x44
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	18d1      	adds	r1, r2, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4403      	add	r3, r0
 8002320:	3344      	adds	r3, #68	; 0x44
 8002322:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	334c      	adds	r3, #76	; 0x4c
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	18d1      	adds	r1, r2, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4403      	add	r3, r0
 8002348:	334c      	adds	r3, #76	; 0x4c
 800234a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d031      	beq.n	80023c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002378:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002380:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3350      	adds	r3, #80	; 0x50
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2d8      	uxtb	r0, r3
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	4602      	mov	r2, r0
 80023be:	701a      	strb	r2, [r3, #0]
      break;
 80023c0:	e001      	b.n	80023c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80023c6:	bf00      	nop
  }
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	1ff80000 	.word	0x1ff80000

080023d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002400:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b02      	cmp	r3, #2
 800240a:	d113      	bne.n	8002434 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d10a      	bne.n	800242c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002424:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f006 fd2e 	bl	8008e88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d147      	bne.n	80024ce <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d129      	bne.n	80024a4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d113      	bne.n	8002480 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800245e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002462:	d106      	bne.n	8002472 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2102      	movs	r1, #2
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fa82 	bl	8005974 <USB_InitFSLSPClkSel>
 8002470:	e011      	b.n	8002496 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fa7b 	bl	8005974 <USB_InitFSLSPClkSel>
 800247e:	e00a      	b.n	8002496 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248e:	461a      	mov	r2, r3
 8002490:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002494:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f006 fd20 	bl	8008edc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f006 fcf3 	bl	8008e88 <HAL_HCD_Connect_Callback>
 80024a2:	e014      	b.n	80024ce <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f006 fd27 	bl	8008ef8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80024b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80024bc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d103      	bne.n	80024e0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e10f      	b.n	8002726 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f006 f98a 	bl	8008834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2224      	movs	r2, #36	; 0x24
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002538:	f001 f9ac 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a7b      	ldr	r2, [pc, #492]	; (8002730 <HAL_I2C_Init+0x23c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d807      	bhi.n	8002558 <HAL_I2C_Init+0x64>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_I2C_Init+0x240>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e006      	b.n	8002566 <HAL_I2C_Init+0x72>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a77      	ldr	r2, [pc, #476]	; (8002738 <HAL_I2C_Init+0x244>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0db      	b.n	8002726 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a72      	ldr	r2, [pc, #456]	; (800273c <HAL_I2C_Init+0x248>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a64      	ldr	r2, [pc, #400]	; (8002730 <HAL_I2C_Init+0x23c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d802      	bhi.n	80025a8 <HAL_I2C_Init+0xb4>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3301      	adds	r3, #1
 80025a6:	e009      	b.n	80025bc <HAL_I2C_Init+0xc8>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_I2C_Init+0x24c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	3301      	adds	r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4956      	ldr	r1, [pc, #344]	; (8002730 <HAL_I2C_Init+0x23c>)
 80025d8:	428b      	cmp	r3, r1
 80025da:	d80d      	bhi.n	80025f8 <HAL_I2C_Init+0x104>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e59      	subs	r1, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	bf38      	it	cc
 80025f4:	2304      	movcc	r3, #4
 80025f6:	e04f      	b.n	8002698 <HAL_I2C_Init+0x1a4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <HAL_I2C_Init+0x130>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e012      	b.n	800264a <HAL_I2C_Init+0x156>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	0099      	lsls	r1, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Init+0x15e>
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_I2C_Init+0x1a4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10e      	bne.n	8002678 <HAL_I2C_Init+0x184>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e58      	subs	r0, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	440b      	add	r3, r1
 8002668:	fbb0 f3f3 	udiv	r3, r0, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Init+0x1a4>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6809      	ldr	r1, [r1, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6911      	ldr	r1, [r2, #16]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	000186a0 	.word	0x000186a0
 8002734:	001e847f 	.word	0x001e847f
 8002738:	003d08ff 	.word	0x003d08ff
 800273c:	431bde83 	.word	0x431bde83
 8002740:	10624dd3 	.word	0x10624dd3

08002744 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e128      	b.n	80029a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a90      	ldr	r2, [pc, #576]	; (80029b0 <HAL_I2S_Init+0x26c>)
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f006 f8a7 	bl	80088c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800278c:	f023 030f 	bic.w	r3, r3, #15
 8002790:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2202      	movs	r2, #2
 8002798:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d060      	beq.n	8002864 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027aa:	2310      	movs	r3, #16
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e001      	b.n	80027b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d802      	bhi.n	80027c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f001 f970 	bl	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 80027c8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d2:	d125      	bne.n	8002820 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	3305      	adds	r3, #5
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e01f      	b.n	800283e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	3305      	adds	r3, #5
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	e00e      	b.n	800283e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	3305      	adds	r3, #5
 800283c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_I2S_Init+0x270>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e003      	b.n	800286c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002864:	2302      	movs	r3, #2
 8002866:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d902      	bls.n	8002878 <HAL_I2S_Init+0x134>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d907      	bls.n	8002888 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e08f      	b.n	80029a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	ea42 0103 	orr.w	r1, r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	430a      	orrs	r2, r1
 800289a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028a6:	f023 030f 	bic.w	r3, r3, #15
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6851      	ldr	r1, [r2, #4]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6992      	ldr	r2, [r2, #24]
 80028be:	430a      	orrs	r2, r1
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d161      	bne.n	8002998 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a38      	ldr	r2, [pc, #224]	; (80029b8 <HAL_I2S_Init+0x274>)
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_I2S_Init+0x278>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_I2S_Init+0x1a4>
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_I2S_Init+0x27c>)
 80028e6:	e001      	b.n	80028ec <HAL_I2S_Init+0x1a8>
 80028e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4932      	ldr	r1, [pc, #200]	; (80029bc <HAL_I2S_Init+0x278>)
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d101      	bne.n	80028fc <HAL_I2S_Init+0x1b8>
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_I2S_Init+0x27c>)
 80028fa:	e001      	b.n	8002900 <HAL_I2S_Init+0x1bc>
 80028fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002900:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_I2S_Init+0x278>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_I2S_Init+0x1d4>
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_I2S_Init+0x27c>)
 8002916:	e001      	b.n	800291c <HAL_I2S_Init+0x1d8>
 8002918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291c:	2202      	movs	r2, #2
 800291e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_I2S_Init+0x278>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2S_Init+0x1ea>
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_I2S_Init+0x27c>)
 800292c:	e001      	b.n	8002932 <HAL_I2S_Init+0x1ee>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293e:	d003      	beq.n	8002948 <HAL_I2S_Init+0x204>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e001      	b.n	8002954 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	b299      	uxth	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800296a:	4303      	orrs	r3, r0
 800296c:	b29b      	uxth	r3, r3
 800296e:	430b      	orrs	r3, r1
 8002970:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002972:	4313      	orrs	r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	4313      	orrs	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002980:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_I2S_Init+0x278>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_I2S_Init+0x24c>
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_I2S_Init+0x27c>)
 800298e:	e001      	b.n	8002994 <HAL_I2S_Init+0x250>
 8002990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002994:	897a      	ldrh	r2, [r7, #10]
 8002996:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08002abb 	.word	0x08002abb
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	08002bd1 	.word	0x08002bd1
 80029bc:	40003800 	.word	0x40003800
 80029c0:	40003400 	.word	0x40003400

080029c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffb8 	bl	80029c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10e      	bne.n	8002ab2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff93 	bl	80029d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d13a      	bne.n	8002b4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d109      	bne.n	8002af4 <I2S_IRQHandler+0x3a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d102      	bne.n	8002af4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffb4 	bl	8002a5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d126      	bne.n	8002b4c <I2S_IRQHandler+0x92>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d11f      	bne.n	8002b4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff50 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d136      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d109      	bne.n	8002b76 <I2S_IRQHandler+0xbc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d102      	bne.n	8002b76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff45 	bl	8002a00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d122      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d11b      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff13 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa2      	ldr	r2, [pc, #648]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bea:	4ba2      	ldr	r3, [pc, #648]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c08:	4b9a      	ldr	r3, [pc, #616]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c0a:	e001      	b.n	8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d004      	beq.n	8002c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8099 	bne.w	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f925 	bl	8002e8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9c8 	bl	8002fec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d13a      	bne.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d035      	beq.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c7a:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c7c:	e001      	b.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4979      	ldr	r1, [pc, #484]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c8a:	428b      	cmp	r3, r1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c8e:	4b79      	ldr	r3, [pc, #484]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c90:	e001      	b.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002caa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fe88 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	f040 80be 	bne.w	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80b8 	beq.w	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a59      	ldr	r2, [pc, #356]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d10:	e001      	b.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4954      	ldr	r1, [pc, #336]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1e:	428b      	cmp	r3, r1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d24:	e001      	b.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe4a 	bl	80029ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d58:	e084      	b.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d107      	bne.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8be 	bl	8002ef0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8fd 	bl	8002f88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d12f      	bne.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02a      	beq.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dbe:	e001      	b.n	8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd2:	e001      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fdfa 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d131      	bne.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02c      	beq.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e18:	e001      	b.n	8002e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4912      	ldr	r1, [pc, #72]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e26:	428b      	cmp	r3, r1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e2c:	e001      	b.n	8002e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e46:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fdc5 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e62:	e000      	b.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e64:	bf00      	nop
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40003800 	.word	0x40003800
 8002e74:	40003400 	.word	0x40003400

08002e78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c99      	adds	r1, r3, #2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ecc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffc9 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c99      	adds	r1, r3, #2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6251      	str	r1, [r2, #36]	; 0x24
 8002f02:	8819      	ldrh	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x22>
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f10:	e001      	b.n	8002f16 <I2SEx_TxISR_I2SExt+0x26>
 8002f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f16:	460a      	mov	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <I2SEx_TxISR_I2SExt+0x50>
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f3e:	e001      	b.n	8002f44 <I2SEx_TxISR_I2SExt+0x54>
 8002f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	490d      	ldr	r1, [pc, #52]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d101      	bne.n	8002f54 <I2SEx_TxISR_I2SExt+0x64>
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f52:	e001      	b.n	8002f58 <I2SEx_TxISR_I2SExt+0x68>
 8002f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff81 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40003800 	.word	0x40003800
 8002f84:	40003400 	.word	0x40003400

08002f88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68d8      	ldr	r0, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	1c99      	adds	r1, r3, #2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fa0:	b282      	uxth	r2, r0
 8002fa2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff4a 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <I2SEx_RxISR_I2SExt+0x16>
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 8003000:	e001      	b.n	8003006 <I2SEx_RxISR_I2SExt+0x1a>
 8003002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003006:	68d8      	ldr	r0, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	1c99      	adds	r1, r3, #2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003012:	b282      	uxth	r2, r0
 8003014:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d121      	bne.n	8003072 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <I2SEx_RxISR_I2SExt+0x50>
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 800303a:	e001      	b.n	8003040 <I2SEx_RxISR_I2SExt+0x54>
 800303c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8003048:	428b      	cmp	r3, r1
 800304a:	d101      	bne.n	8003050 <I2SEx_RxISR_I2SExt+0x64>
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 800304e:	e001      	b.n	8003054 <I2SEx_RxISR_I2SExt+0x68>
 8003050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003058:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff03 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40003800 	.word	0x40003800
 8003080:	40003400 	.word	0x40003400

08003084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e22d      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a2:	4ba3      	ldr	r3, [pc, #652]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d00c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4ba0      	ldr	r3, [pc, #640]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d112      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4b9d      	ldr	r3, [pc, #628]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	4b99      	ldr	r3, [pc, #612]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05b      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d157      	bne.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e208      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x74>
 80030ea:	4b91      	ldr	r3, [pc, #580]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a90      	ldr	r2, [pc, #576]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b8b      	ldr	r3, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a8a      	ldr	r2, [pc, #552]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a87      	ldr	r2, [pc, #540]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 800311c:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a83      	ldr	r2, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b81      	ldr	r3, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a80      	ldr	r2, [pc, #512]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fd fa2a 	bl	8000594 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003144:	f7fd fa26 	bl	8000594 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1cd      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xc0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fd fa16 	bl	8000594 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800316c:	f7fd fa12 	bl	8000594 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1b9      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e18d      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b56      	ldr	r3, [pc, #344]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4952      	ldr	r1, [pc, #328]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <HAL_RCC_OscConfig+0x2b0>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fd f9cb 	bl	8000594 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003202:	f7fd f9c7 	bl	8000594 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e16e      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b43      	ldr	r3, [pc, #268]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4940      	ldr	r1, [pc, #256]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x2b0>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd f9aa 	bl	8000594 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003244:	f7fd f9a6 	bl	8000594 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e14d      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d030      	beq.n	80032d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCC_OscConfig+0x2b4>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fd f98a 	bl	8000594 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003284:	f7fd f986 	bl	8000594 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e12d      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x200>
 80032a2:	e015      	b.n	80032d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_RCC_OscConfig+0x2b4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fd f973 	bl	8000594 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fd f96f 	bl	8000594 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e116      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a0 	beq.w	800341e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x2b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d121      	bne.n	800335e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_RCC_OscConfig+0x2b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a07      	ldr	r2, [pc, #28]	; (800333c <HAL_RCC_OscConfig+0x2b8>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003326:	f7fd f935 	bl	8000594 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	e011      	b.n	8003352 <HAL_RCC_OscConfig+0x2ce>
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	42470000 	.word	0x42470000
 8003338:	42470e80 	.word	0x42470e80
 800333c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003340:	f7fd f928 	bl	8000594 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cf      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x478>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x2f0>
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x312>
 800337c:	4b60      	ldr	r3, [pc, #384]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a5f      	ldr	r2, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x32a>
 8003396:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a59      	ldr	r2, [pc, #356]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a56      	ldr	r2, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fd f8ed 	bl	8000594 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fd f8e9 	bl	8000594 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e08e      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x33a>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fd f8d7 	bl	8000594 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd f8d3 	bl	8000594 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e078      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d064      	beq.n	80034f0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_OscConfig+0x480>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd f8a8 	bl	8000594 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fd f8a4 	bl	8000594 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e04b      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491d      	ldr	r1, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_RCC_OscConfig+0x480>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd f87d 	bl	8000594 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7fd f879 	bl	8000594 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e020      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x41a>
 80034bc:	e018      	b.n	80034f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_RCC_OscConfig+0x480>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd f866 	bl	8000594 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd f862 	bl	8000594 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x47c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x448>
 80034ea:	e001      	b.n	80034f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000
 8003500:	40023800 	.word	0x40023800
 8003504:	42470060 	.word	0x42470060

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0ca      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b64      	ldr	r3, [pc, #400]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b62      	ldr	r3, [pc, #392]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b6      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494c      	ldr	r1, [pc, #304]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07d      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06d      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e065      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4933      	ldr	r1, [pc, #204]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fc ffcc 	bl	8000594 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fc ffc8 	bl	8000594 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04d      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <HAL_RCC_ClockConfig+0x1b4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e030      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4915      	ldr	r1, [pc, #84]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490d      	ldr	r1, [pc, #52]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f81d 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003692:	4601      	mov	r1, r0
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	5cd3      	ldrb	r3, [r2, r3]
 80036a2:	fa21 f303 	lsr.w	r3, r1, r3
 80036a6:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fc ff2e 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00
 80036c0:	40023800 	.word	0x40023800
 80036c4:	0800951c 	.word	0x0800951c
 80036c8:	20000030 	.word	0x20000030

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d007      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x32>
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d008      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x38>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 80b4 	bne.w	8003860 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036fa:	60bb      	str	r3, [r7, #8]
       break;
 80036fc:	e0b3      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003700:	60bb      	str	r3, [r7, #8]
      break;
 8003702:	e0b0      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04a      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b55      	ldr	r3, [pc, #340]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	f04f 0400 	mov.w	r4, #0
 8003724:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	ea03 0501 	and.w	r5, r3, r1
 8003730:	ea04 0602 	and.w	r6, r4, r2
 8003734:	4629      	mov	r1, r5
 8003736:	4632      	mov	r2, r6
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	0154      	lsls	r4, r2, #5
 8003742:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003746:	014b      	lsls	r3, r1, #5
 8003748:	4619      	mov	r1, r3
 800374a:	4622      	mov	r2, r4
 800374c:	1b49      	subs	r1, r1, r5
 800374e:	eb62 0206 	sbc.w	r2, r2, r6
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	f04f 0400 	mov.w	r4, #0
 800375a:	0194      	lsls	r4, r2, #6
 800375c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003760:	018b      	lsls	r3, r1, #6
 8003762:	1a5b      	subs	r3, r3, r1
 8003764:	eb64 0402 	sbc.w	r4, r4, r2
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	00e2      	lsls	r2, r4, #3
 8003772:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003776:	00d9      	lsls	r1, r3, #3
 8003778:	460b      	mov	r3, r1
 800377a:	4614      	mov	r4, r2
 800377c:	195b      	adds	r3, r3, r5
 800377e:	eb44 0406 	adc.w	r4, r4, r6
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	0262      	lsls	r2, r4, #9
 800378c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003790:	0259      	lsls	r1, r3, #9
 8003792:	460b      	mov	r3, r1
 8003794:	4614      	mov	r4, r2
 8003796:	4618      	mov	r0, r3
 8003798:	4621      	mov	r1, r4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f04f 0400 	mov.w	r4, #0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	f7fc fd10 	bl	80001c8 <__aeabi_uldivmod>
 80037a8:	4603      	mov	r3, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e049      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b0:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	f04f 0400 	mov.w	r4, #0
 80037ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	ea03 0501 	and.w	r5, r3, r1
 80037c6:	ea04 0602 	and.w	r6, r4, r2
 80037ca:	4629      	mov	r1, r5
 80037cc:	4632      	mov	r2, r6
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	0154      	lsls	r4, r2, #5
 80037d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037dc:	014b      	lsls	r3, r1, #5
 80037de:	4619      	mov	r1, r3
 80037e0:	4622      	mov	r2, r4
 80037e2:	1b49      	subs	r1, r1, r5
 80037e4:	eb62 0206 	sbc.w	r2, r2, r6
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f04f 0400 	mov.w	r4, #0
 80037f0:	0194      	lsls	r4, r2, #6
 80037f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037f6:	018b      	lsls	r3, r1, #6
 80037f8:	1a5b      	subs	r3, r3, r1
 80037fa:	eb64 0402 	sbc.w	r4, r4, r2
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	00e2      	lsls	r2, r4, #3
 8003808:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800380c:	00d9      	lsls	r1, r3, #3
 800380e:	460b      	mov	r3, r1
 8003810:	4614      	mov	r4, r2
 8003812:	195b      	adds	r3, r3, r5
 8003814:	eb44 0406 	adc.w	r4, r4, r6
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	02a2      	lsls	r2, r4, #10
 8003822:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003826:	0299      	lsls	r1, r3, #10
 8003828:	460b      	mov	r3, r1
 800382a:	4614      	mov	r4, r2
 800382c:	4618      	mov	r0, r3
 800382e:	4621      	mov	r1, r4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f04f 0400 	mov.w	r4, #0
 8003836:	461a      	mov	r2, r3
 8003838:	4623      	mov	r3, r4
 800383a:	f7fc fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800383e:	4603      	mov	r3, r0
 8003840:	460c      	mov	r4, r1
 8003842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	60bb      	str	r3, [r7, #8]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003862:	60bb      	str	r3, [r7, #8]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	00f42400 	.word	0x00f42400
 8003878:	007a1200 	.word	0x007a1200

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_GetHCLKFreq+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000030 	.word	0x20000030

08003894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003898:	f7ff fff0 	bl	800387c <HAL_RCC_GetHCLKFreq>
 800389c:	4601      	mov	r1, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0a9b      	lsrs	r3, r3, #10
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	0800952c 	.word	0x0800952c

080038bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c0:	f7ff ffdc 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038c4:	4601      	mov	r1, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0b5b      	lsrs	r3, r3, #13
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	0800952c 	.word	0x0800952c

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003908:	2b00      	cmp	r3, #0
 800390a:	d035      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003912:	f7fc fe3f 	bl	8000594 <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800391a:	f7fc fe3b 	bl	8000594 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0b0      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800392c:	4b5b      	ldr	r3, [pc, #364]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	019a      	lsls	r2, r3, #6
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	071b      	lsls	r3, r3, #28
 8003944:	4955      	ldr	r1, [pc, #340]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800394c:	4b52      	ldr	r3, [pc, #328]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003952:	f7fc fe1f 	bl	8000594 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800395a:	f7fc fe1b 	bl	8000594 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e090      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8083 	beq.w	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039a2:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3e      	ldr	r2, [pc, #248]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ae:	f7fc fdf1 	bl	8000594 <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fc fded 	bl	8000594 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e062      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02f      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d028      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039fc:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a08:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d114      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fc fdbb 	bl	8000594 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fc fdb7 	bl	8000594 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e02a      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ee      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a50:	d10d      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]
 8003a6c:	e005      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a78:	6093      	str	r3, [r2, #8]
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a86:	4905      	ldr	r1, [pc, #20]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	42470068 	.word	0x42470068
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42470e40 	.word	0x42470e40

08003aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d13d      	bne.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ace:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12f      	bne.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003adc:	617b      	str	r3, [r7, #20]
          break;
 8003ade:	e02f      	b.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aec:	d108      	bne.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e007      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2a:	0f1b      	lsrs	r3, r3, #28
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	617b      	str	r3, [r7, #20]
          break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
          break;
 8003b3e:	bf00      	nop
        }
      }
      break;
 8003b40:	bf00      	nop
    }
  }
  return frequency;
 8003b42:	697b      	ldr	r3, [r7, #20]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40023800 	.word	0x40023800
 8003b54:	00bb8000 	.word	0x00bb8000
 8003b58:	007a1200 	.word	0x007a1200
 8003b5c:	00f42400 	.word	0x00f42400

08003b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e056      	b.n	8003c20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f004 ff01 	bl	8008994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	ea42 0103 	orr.w	r1, r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	f003 0104 	and.w	r1, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01d      	b.n	8003c76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f004 fee8 	bl	8008a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fb10 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d007      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e01d      	b.n	8003d14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f815 	bl	8003d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 fac1 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0202 	mvn.w	r2, #2
 8003d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa6b 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa5d 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa6e 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0204 	mvn.w	r2, #4
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa41 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa33 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa44 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0208 	mvn.w	r2, #8
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa17 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fa09 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fa1a 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0210 	mvn.w	r2, #16
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9ed 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9df 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9f0 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0201 	mvn.w	r2, #1
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f004 f93e 	bl	8008130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fd0f 	bl	80048fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9b5 	bl	8004276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0220 	mvn.w	r2, #32
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fcd9 	bl	80048ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0b4      	b.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	f200 809f 	bhi.w	80040b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003fad 	.word	0x08003fad
 8003f7c:	080040b1 	.word	0x080040b1
 8003f80:	080040b1 	.word	0x080040b1
 8003f84:	080040b1 	.word	0x080040b1
 8003f88:	08003fed 	.word	0x08003fed
 8003f8c:	080040b1 	.word	0x080040b1
 8003f90:	080040b1 	.word	0x080040b1
 8003f94:	080040b1 	.word	0x080040b1
 8003f98:	0800402f 	.word	0x0800402f
 8003f9c:	080040b1 	.word	0x080040b1
 8003fa0:	080040b1 	.word	0x080040b1
 8003fa4:	080040b1 	.word	0x080040b1
 8003fa8:	0800406f 	.word	0x0800406f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fa0a 	bl	80043cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
      break;
 8003fea:	e062      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fa5a 	bl	80044ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	619a      	str	r2, [r3, #24]
      break;
 800402c:	e041      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 faaf 	bl	8004598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0208 	orr.w	r2, r2, #8
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0204 	bic.w	r2, r2, #4
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	61da      	str	r2, [r3, #28]
      break;
 800406c:	e021      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fb03 	bl	8004680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
      break;
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80040b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIM_ConfigClockSource+0x18>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0a6      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x166>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d067      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0x120>
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d80b      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x6c>
 8004120:	2b10      	cmp	r3, #16
 8004122:	d073      	beq.n	800420c <HAL_TIM_ConfigClockSource+0x140>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d802      	bhi.n	800412e <HAL_TIM_ConfigClockSource+0x62>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d06f      	beq.n	800420c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800412c:	e078      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800412e:	2b20      	cmp	r3, #32
 8004130:	d06c      	beq.n	800420c <HAL_TIM_ConfigClockSource+0x140>
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d06a      	beq.n	800420c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004136:	e073      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d00d      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x8c>
 800413c:	2b70      	cmp	r3, #112	; 0x70
 800413e:	d804      	bhi.n	800414a <HAL_TIM_ConfigClockSource+0x7e>
 8004140:	2b50      	cmp	r3, #80	; 0x50
 8004142:	d033      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0xe0>
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d041      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004148:	e06a      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d066      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x152>
 8004150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004154:	d017      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004156:	e063      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f000 fb5a 	bl	8004820 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800417a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]
      break;
 8004184:	e04c      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6899      	ldr	r1, [r3, #8]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f000 fb43 	bl	8004820 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041a8:	609a      	str	r2, [r3, #8]
      break;
 80041aa:	e039      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	461a      	mov	r2, r3
 80041ba:	f000 fab7 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2150      	movs	r1, #80	; 0x50
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fb10 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 80041ca:	e029      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	461a      	mov	r2, r3
 80041da:	f000 fad6 	bl	800478a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2160      	movs	r1, #96	; 0x60
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fb00 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 80041ea:	e019      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f000 fa97 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	4618      	mov	r0, r3
 8004206:	f000 faf0 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 800420a:	e009      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 fae7 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 800421c:	e000      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800421e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <TIM_Base_SetConfig+0x120>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d108      	bne.n	80042de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d02b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d027      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d023      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <TIM_Base_SetConfig+0x120>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d017      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <TIM_Base_SetConfig+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <TIM_Base_SetConfig+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <TIM_Base_SetConfig+0x130>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0x134>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <TIM_Base_SetConfig+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_Base_SetConfig+0x13c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0xf8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40010400 	.word	0x40010400
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800
 80043c0:	40001800 	.word	0x40001800
 80043c4:	40001c00 	.word	0x40001c00
 80043c8:	40002000 	.word	0x40002000

080043cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 0302 	bic.w	r3, r3, #2
 8004414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_OC1_SetConfig+0xd8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC1_SetConfig+0x64>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <TIM_OC1_SetConfig+0xdc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10c      	bne.n	800444a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0308 	bic.w	r3, r3, #8
 8004436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <TIM_OC1_SetConfig+0xd8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC1_SetConfig+0x8e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC1_SetConfig+0xdc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d111      	bne.n	800447e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400

080044ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0210 	bic.w	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0320 	bic.w	r3, r3, #32
 80044f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <TIM_OC2_SetConfig+0xe4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC2_SetConfig+0x68>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <TIM_OC2_SetConfig+0xe8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10d      	bne.n	8004530 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <TIM_OC2_SetConfig+0xe4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_OC2_SetConfig+0x94>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a16      	ldr	r2, [pc, #88]	; (8004594 <TIM_OC2_SetConfig+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d113      	bne.n	8004568 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a21      	ldr	r2, [pc, #132]	; (8004678 <TIM_OC3_SetConfig+0xe0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <TIM_OC3_SetConfig+0x66>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <TIM_OC3_SetConfig+0xe4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10d      	bne.n	800461a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <TIM_OC3_SetConfig+0xe0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC3_SetConfig+0x92>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <TIM_OC3_SetConfig+0xe4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d113      	bne.n	8004652 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40010000 	.word	0x40010000
 800467c:	40010400 	.word	0x40010400

08004680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <TIM_OC4_SetConfig+0xa4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC4_SetConfig+0x68>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <TIM_OC4_SetConfig+0xa8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0201 	bic.w	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 030a 	bic.w	r3, r3, #10
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478a:	b480      	push	{r7}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	f043 0307 	orr.w	r3, r3, #7
 800480c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	431a      	orrs	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e032      	b.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e03f      	b.n	80049a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f004 f8d9 	bl	8008af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2224      	movs	r2, #36	; 0x24
 8004942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004954:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fb9c 	bl	8005094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	f040 8083 	bne.w	8004ad4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_UART_Transmit+0x2e>
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07b      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Transmit+0x40>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e074      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2221      	movs	r2, #33	; 0x21
 80049fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a02:	f7fb fdc7 	bl	8000594 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a14:	e042      	b.n	8004a9c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d122      	bne.n	8004a74 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f9bf 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e046      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3302      	adds	r3, #2
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	e017      	b.n	8004a9c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	e013      	b.n	8004a9c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f99c 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e023      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	60ba      	str	r2, [r7, #8]
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1b7      	bne.n	8004a16 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2140      	movs	r1, #64	; 0x40
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f983 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e00a      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d140      	bne.n	8004b7a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UART_Receive_IT+0x26>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e039      	b.n	8004b7c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Receive_IT+0x38>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e032      	b.n	8004b7c <HAL_UART_Receive_IT+0x9e>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2222      	movs	r2, #34	; 0x22
 8004b3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b54:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0220 	orr.w	r2, r2, #32
 8004b74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_UART_IRQHandler+0x52>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f9dc 	bl	8004f90 <UART_Receive_IT>
      return;
 8004bd8:	e0cc      	b.n	8004d74 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80ab 	beq.w	8004d38 <HAL_UART_IRQHandler+0x1b0>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x70>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a0 	beq.w	8004d38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_UART_IRQHandler+0x90>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_UART_IRQHandler+0xb0>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	f043 0202 	orr.w	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_IRQHandler+0xd0>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	f043 0204 	orr.w	r2, r3, #4
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0xf0>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	f043 0208 	orr.w	r2, r3, #8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d078      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_UART_IRQHandler+0x112>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f97b 	bl	8004f90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x13a>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d031      	beq.n	8004d26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8c4 	bl	8004e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d123      	bne.n	8004d1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d013      	beq.n	8004d16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_UART_IRQHandler+0x1f4>)
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb fd89 	bl	8000812 <HAL_DMA_Abort_IT>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	e00e      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f846 	bl	8004da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	e00a      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f842 	bl	8004da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e006      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f83e 	bl	8004da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d32:	e01e      	b.n	8004d72 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	bf00      	nop
    return;
 8004d36:	e01c      	b.n	8004d72 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_UART_IRQHandler+0x1cc>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8b1 	bl	8004eb4 <UART_Transmit_IT>
    return;
 8004d52:	e00f      	b.n	8004d74 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_UART_IRQHandler+0x1ec>
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8f9 	bl	8004f60 <UART_EndTransmit_IT>
    return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004d72:	bf00      	nop
  }
}
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08004e8d 	.word	0x08004e8d

08004d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	e02c      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d028      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <UART_WaitOnFlagUntilTimeout+0x30>
 8004ddc:	f7fb fbda 	bl	8000594 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d21d      	bcs.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e00f      	b.n	8004e48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d0c3      	beq.n	8004dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff ff7e 	bl	8004da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b21      	cmp	r3, #33	; 0x21
 8004ec6:	d144      	bne.n	8004f52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d11a      	bne.n	8004f08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]
 8004efa:	e00e      	b.n	8004f1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]
 8004f06:	e008      	b.n	8004f1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6211      	str	r1, [r2, #32]
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4619      	mov	r1, r3
 8004f28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e000      	b.n	8004f54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fefd 	bl	8004d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	d171      	bne.n	8005088 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	d123      	bne.n	8004ff6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10e      	bne.n	8004fda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd8:	e029      	b.n	800502e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff4:	e01b      	b.n	800502e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6858      	ldr	r0, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6291      	str	r1, [r2, #40]	; 0x28
 800500e:	b2c2      	uxtb	r2, r0
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e00c      	b.n	800502e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	1c58      	adds	r0, r3, #1
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	6288      	str	r0, [r1, #40]	; 0x28
 8005026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4619      	mov	r1, r3
 800503c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800503e:	2b00      	cmp	r3, #0
 8005040:	d120      	bne.n	8005084 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0220 	bic.w	r2, r2, #32
 8005050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fe8a 	bl	8004d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e002      	b.n	800508a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050d4:	f023 030c 	bic.w	r3, r3, #12
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	430b      	orrs	r3, r1
 80050e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005100:	f040 80e4 	bne.w	80052cc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4aab      	ldr	r2, [pc, #684]	; (80053b8 <UART_SetConfig+0x324>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <UART_SetConfig+0x84>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4aaa      	ldr	r2, [pc, #680]	; (80053bc <UART_SetConfig+0x328>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d16c      	bne.n	80051f2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005118:	f7fe fbd0 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 800511c:	4602      	mov	r2, r0
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009a      	lsls	r2, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	4aa3      	ldr	r2, [pc, #652]	; (80053c0 <UART_SetConfig+0x32c>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	011c      	lsls	r4, r3, #4
 800513c:	f7fe fbbe 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005140:	4602      	mov	r2, r0
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009a      	lsls	r2, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	fbb2 f5f3 	udiv	r5, r2, r3
 8005156:	f7fe fbb1 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 800515a:	4602      	mov	r2, r0
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009a      	lsls	r2, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	4a93      	ldr	r2, [pc, #588]	; (80053c0 <UART_SetConfig+0x32c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2264      	movs	r2, #100	; 0x64
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	1aeb      	subs	r3, r5, r3
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	3332      	adds	r3, #50	; 0x32
 8005184:	4a8e      	ldr	r2, [pc, #568]	; (80053c0 <UART_SetConfig+0x32c>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005192:	441c      	add	r4, r3
 8005194:	f7fe fb92 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005198:	4602      	mov	r2, r0
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80051ae:	f7fe fb85 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009a      	lsls	r2, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	4a7d      	ldr	r2, [pc, #500]	; (80053c0 <UART_SetConfig+0x32c>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	; 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1aeb      	subs	r3, r5, r3
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	3332      	adds	r3, #50	; 0x32
 80051dc:	4a78      	ldr	r2, [pc, #480]	; (80053c0 <UART_SetConfig+0x32c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 0207 	and.w	r2, r3, #7
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4422      	add	r2, r4
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	e154      	b.n	800549c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80051f2:	f7fe fb4f 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009a      	lsls	r2, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	4a6c      	ldr	r2, [pc, #432]	; (80053c0 <UART_SetConfig+0x32c>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011c      	lsls	r4, r3, #4
 8005216:	f7fe fb3d 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800521a:	4602      	mov	r2, r0
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009a      	lsls	r2, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005230:	f7fe fb30 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005234:	4602      	mov	r2, r0
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009a      	lsls	r2, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	4a5d      	ldr	r2, [pc, #372]	; (80053c0 <UART_SetConfig+0x32c>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2264      	movs	r2, #100	; 0x64
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	1aeb      	subs	r3, r5, r3
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <UART_SetConfig+0x32c>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800526c:	441c      	add	r4, r3
 800526e:	f7fe fb11 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005272:	4602      	mov	r2, r0
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009a      	lsls	r2, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	fbb2 f5f3 	udiv	r5, r2, r3
 8005288:	f7fe fb04 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800528c:	4602      	mov	r2, r0
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009a      	lsls	r2, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	4a47      	ldr	r2, [pc, #284]	; (80053c0 <UART_SetConfig+0x32c>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2264      	movs	r2, #100	; 0x64
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	1aeb      	subs	r3, r5, r3
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a42      	ldr	r2, [pc, #264]	; (80053c0 <UART_SetConfig+0x32c>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 0207 	and.w	r2, r3, #7
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4422      	add	r2, r4
 80052c8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80052ca:	e0e7      	b.n	800549c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a39      	ldr	r2, [pc, #228]	; (80053b8 <UART_SetConfig+0x324>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <UART_SetConfig+0x24c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a38      	ldr	r2, [pc, #224]	; (80053bc <UART_SetConfig+0x328>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d171      	bne.n	80053c4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80052e0:	f7fe faec 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009a      	lsls	r2, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	4a31      	ldr	r2, [pc, #196]	; (80053c0 <UART_SetConfig+0x32c>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	011c      	lsls	r4, r3, #4
 8005304:	f7fe fada 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005308:	4602      	mov	r2, r0
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009a      	lsls	r2, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	fbb2 f5f3 	udiv	r5, r2, r3
 800531e:	f7fe facd 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005322:	4602      	mov	r2, r0
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <UART_SetConfig+0x32c>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2264      	movs	r2, #100	; 0x64
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	1aeb      	subs	r3, r5, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <UART_SetConfig+0x32c>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005358:	441c      	add	r4, r3
 800535a:	f7fe faaf 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 800535e:	4602      	mov	r2, r0
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009a      	lsls	r2, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	fbb2 f5f3 	udiv	r5, r2, r3
 8005374:	f7fe faa2 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005378:	4602      	mov	r2, r0
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009a      	lsls	r2, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <UART_SetConfig+0x32c>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	2264      	movs	r2, #100	; 0x64
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	1aeb      	subs	r3, r5, r3
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	3332      	adds	r3, #50	; 0x32
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <UART_SetConfig+0x32c>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4422      	add	r2, r4
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	e071      	b.n	800549c <UART_SetConfig+0x408>
 80053b8:	40011000 	.word	0x40011000
 80053bc:	40011400 	.word	0x40011400
 80053c0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80053c4:	f7fe fa66 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009a      	lsls	r2, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <UART_SetConfig+0x410>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	011c      	lsls	r4, r3, #4
 80053e8:	f7fe fa54 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009a      	lsls	r2, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8005402:	f7fe fa47 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005406:	4602      	mov	r2, r0
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009a      	lsls	r2, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <UART_SetConfig+0x410>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2264      	movs	r2, #100	; 0x64
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	1aeb      	subs	r3, r5, r3
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	3332      	adds	r3, #50	; 0x32
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <UART_SetConfig+0x410>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543c:	441c      	add	r4, r3
 800543e:	f7fe fa29 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005442:	4602      	mov	r2, r0
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009a      	lsls	r2, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	fbb2 f5f3 	udiv	r5, r2, r3
 8005458:	f7fe fa1c 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800545c:	4602      	mov	r2, r0
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009a      	lsls	r2, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <UART_SetConfig+0x410>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2264      	movs	r2, #100	; 0x64
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	1aeb      	subs	r3, r5, r3
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <UART_SetConfig+0x410>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4422      	add	r2, r4
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	e7ff      	b.n	800549c <UART_SetConfig+0x408>
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bdb0      	pop	{r4, r5, r7, pc}
 80054a4:	51eb851f 	.word	0x51eb851f

080054a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 001c 	add.w	r0, r7, #28
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d122      	bne.n	8005506 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f94a 	bl	8005794 <USB_CoreReset>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
 8005504:	e01a      	b.n	800553c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f93e 	bl	8005794 <USB_CoreReset>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
 800552e:	e005      	b.n	800553c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10b      	bne.n	800555a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f043 0206 	orr.w	r2, r3, #6
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005566:	b004      	add	sp, #16
 8005568:	4770      	bx	lr

0800556a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f043 0201 	orr.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 0201 	bic.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d106      	bne.n	80055da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
 80055d8:	e00b      	b.n	80055f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e001      	b.n	80055f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e003      	b.n	80055fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055f2:	2032      	movs	r0, #50	; 0x32
 80055f4:	f7fa ffda 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	019b      	lsls	r3, r3, #6
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <USB_FlushTxFifo+0x48>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e006      	b.n	800563e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d0f0      	beq.n	800561e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	00030d40 	.word	0x00030d40

08005650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2210      	movs	r2, #16
 8005660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <USB_FlushRxFifo+0x40>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e006      	b.n	8005682 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b10      	cmp	r3, #16
 800567e:	d0f0      	beq.n	8005662 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	00030d40 	.word	0x00030d40

08005694 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	460b      	mov	r3, r1
 80056a4:	71fb      	strb	r3, [r7, #7]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80056b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11a      	bne.n	80056f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ba:	88bb      	ldrh	r3, [r7, #4]
 80056bc:	3303      	adds	r3, #3
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	e00f      	b.n	80056e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	031a      	lsls	r2, r3, #12
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d4:	461a      	mov	r2, r3
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3304      	adds	r3, #4
 80056e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d3eb      	bcc.n	80056c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3724      	adds	r7, #36	; 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056fe:	b480      	push	{r7}
 8005700:	b089      	sub	sp, #36	; 0x24
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	3303      	adds	r3, #3
 8005718:	089b      	lsrs	r3, r3, #2
 800571a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e00b      	b.n	800573a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	601a      	str	r2, [r3, #0]
    pDest++;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3304      	adds	r3, #4
 8005732:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	3301      	adds	r3, #1
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3ef      	bcc.n	8005722 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3724      	adds	r7, #36	; 0x24
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005768:	68fb      	ldr	r3, [r7, #12]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0301 	and.w	r3, r3, #1
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <USB_CoreReset+0x64>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e01b      	b.n	80057ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	daf2      	bge.n	80057a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f043 0201 	orr.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <USB_CoreReset+0x64>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e006      	b.n	80057ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d0f0      	beq.n	80057ca <USB_CoreReset+0x36>

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	00030d40 	.word	0x00030d40

080057fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057fc:	b084      	sub	sp, #16
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	f107 001c 	add.w	r0, r7, #28
 800580a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005818:	461a      	mov	r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b03      	cmp	r3, #3
 8005852:	d10a      	bne.n	800586a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e014      	b.n	8005894 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e009      	b.n	8005894 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005894:	2110      	movs	r1, #16
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff feb4 	bl	8005604 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fed7 	bl	8005650 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e015      	b.n	80058d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3e5      	bcc.n	80058a8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8ac 	bl	8005a3c <USB_DriveVbus>

  HAL_Delay(200U);
 80058e4:	20c8      	movs	r0, #200	; 0xc8
 80058e6:	f7fa fe61 	bl	80005ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a14      	ldr	r2, [pc, #80]	; (8005960 <USB_HostInit+0x164>)
 8005910:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <USB_HostInit+0x168>)
 8005916:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800591a:	e009      	b.n	8005930 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a10      	ldr	r2, [pc, #64]	; (8005968 <USB_HostInit+0x16c>)
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <USB_HostInit+0x170>)
 800592c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <USB_HostInit+0x174>)
 8005948:	4313      	orrs	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800595a:	b004      	add	sp, #16
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	01000200 	.word	0x01000200
 8005964:	00e00300 	.word	0x00e00300
 8005968:	00600080 	.word	0x00600080
 800596c:	004000e0 	.word	0x004000e0
 8005970:	a3200008 	.word	0xa3200008

08005974 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059bc:	461a      	mov	r2, r3
 80059be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059c2:	6053      	str	r3, [r2, #4]
 80059c4:	e009      	b.n	80059da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d106      	bne.n	80059da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d2:	461a      	mov	r2, r3
 80059d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80059d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a18:	2064      	movs	r0, #100	; 0x64
 8005a1a:	f7fa fdc7 	bl	80005ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a2c:	200a      	movs	r0, #10
 8005a2e:	f7fa fdbd 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <USB_DriveVbus+0x44>
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d106      	bne.n	8005a80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d109      	bne.n	8005aa0 <USB_DriveVbus+0x64>
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	0c5b      	lsrs	r3, r3, #17
 8005acc:	f003 0303 	and.w	r3, r3, #3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	b29b      	uxth	r3, r3
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	70fb      	strb	r3, [r7, #3]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70bb      	strb	r3, [r7, #2]
 8005b16:	4613      	mov	r3, r2
 8005b18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295
 8005b34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d87e      	bhi.n	8005c3c <USB_HC_Init+0x13c>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <USB_HC_Init+0x44>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005bff 	.word	0x08005bff
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005bc1 	.word	0x08005bc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da10      	bge.n	8005b92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005b90:	e057      	b.n	8005c42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d051      	beq.n	8005c42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bbc:	60d3      	str	r3, [r2, #12]
      break;
 8005bbe:	e040      	b.n	8005c42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f240 639d 	movw	r3, #1693	; 0x69d
 8005bd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	da34      	bge.n	8005c46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005bfc:	e023      	b.n	8005c46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f240 2325 	movw	r3, #549	; 0x225
 8005c10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da17      	bge.n	8005c4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c3a:	e006      	b.n	8005c4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c40:	e004      	b.n	8005c4c <USB_HC_Init+0x14c>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <USB_HC_Init+0x14c>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <USB_HC_Init+0x14c>
      break;
 8005c4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c66:	4313      	orrs	r3, r2
 8005c68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da03      	bge.n	8005c86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	e001      	b.n	8005c8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d103      	bne.n	8005c9a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e001      	b.n	8005c9e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c9e:	787b      	ldrb	r3, [r7, #1]
 8005ca0:	059b      	lsls	r3, r3, #22
 8005ca2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ca6:	78bb      	ldrb	r3, [r7, #2]
 8005ca8:	02db      	lsls	r3, r3, #11
 8005caa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cb4:	049b      	lsls	r3, r3, #18
 8005cb6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cc2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	0159      	lsls	r1, r3, #5
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	440b      	add	r3, r1
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cda:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d10f      	bne.n	8005d04 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d02:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop

08005d14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d028      	beq.n	8005d90 <USB_HC_StartXfer+0x7c>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	791b      	ldrb	r3, [r3, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d124      	bne.n	8005d90 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <USB_HC_StartXfer+0x50>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	795b      	ldrb	r3, [r3, #5]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fa2e 	bl	80061bc <USB_DoPing>
      return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e112      	b.n	8005f8a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d112      	bne.n	8005d90 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d88:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d018      	beq.n	8005dca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	8912      	ldrh	r2, [r2, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	3b01      	subs	r3, #1
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	8912      	ldrh	r2, [r2, #8]
 8005da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005dae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005db0:	8b7b      	ldrh	r3, [r7, #26]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d90b      	bls.n	8005dce <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005db6:	8b7b      	ldrh	r3, [r7, #26]
 8005db8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	8912      	ldrh	r2, [r2, #8]
 8005dc0:	fb02 f203 	mul.w	r2, r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	611a      	str	r2, [r3, #16]
 8005dc8:	e001      	b.n	8005dce <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	8912      	ldrh	r2, [r2, #8]
 8005ddc:	fb02 f203 	mul.w	r2, r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dee:	04d9      	lsls	r1, r3, #19
 8005df0:	4b68      	ldr	r3, [pc, #416]	; (8005f94 <USB_HC_StartXfer+0x280>)
 8005df2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7a9b      	ldrb	r3, [r3, #10]
 8005dfa:	075b      	lsls	r3, r3, #29
 8005dfc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	6a39      	ldr	r1, [r7, #32]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68d9      	ldr	r1, [r3, #12]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	460a      	mov	r2, r1
 8005e28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	7e7b      	ldrb	r3, [r7, #25]
 8005e72:	075b      	lsls	r3, r3, #29
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	0148      	lsls	r0, r1, #5
 8005e78:	6a39      	ldr	r1, [r7, #32]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a41      	ldr	r2, [pc, #260]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005e94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e96:	4b40      	ldr	r3, [pc, #256]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e9e:	4a3e      	ldr	r2, [pc, #248]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005ea0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	78db      	ldrb	r3, [r3, #3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb2:	4a39      	ldr	r2, [pc, #228]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e005      	b.n	8005ec4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005eb8:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec0:	4a35      	ldr	r2, [pc, #212]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005ec2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ecc:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005ece:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <USB_HC_StartXfer+0x284>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d14e      	bne.n	8005f88 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d14a      	bne.n	8005f88 <USB_HC_StartXfer+0x274>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d046      	beq.n	8005f88 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	79db      	ldrb	r3, [r3, #7]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d830      	bhi.n	8005f64 <USB_HC_StartXfer+0x250>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USB_HC_StartXfer+0x1f4>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f3d 	.word	0x08005f3d
 8005f10:	08005f19 	.word	0x08005f19
 8005f14:	08005f3d 	.word	0x08005f3d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	3303      	adds	r3, #3
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f22:	8afa      	ldrh	r2, [r7, #22]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d91c      	bls.n	8005f68 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	619a      	str	r2, [r3, #24]
          }
          break;
 8005f3a:	e015      	b.n	8005f68 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	3303      	adds	r3, #3
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f46:	8afa      	ldrh	r2, [r7, #22]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d90a      	bls.n	8005f6c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	619a      	str	r2, [r3, #24]
          }
          break;
 8005f62:	e003      	b.n	8005f6c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005f64:	bf00      	nop
 8005f66:	e002      	b.n	8005f6e <USB_HC_StartXfer+0x25a>
          break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <USB_HC_StartXfer+0x25a>
          break;
 8005f6c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	68d9      	ldr	r1, [r3, #12]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	785a      	ldrb	r2, [r3, #1]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	b298      	uxth	r0, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4603      	mov	r3, r0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fb86 	bl	8005694 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3728      	adds	r7, #40	; 0x28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	1ff80000 	.word	0x1ff80000
 8005f98:	200000b4 	.word	0x200000b4

08005f9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	b29b      	uxth	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0c9b      	lsrs	r3, r3, #18
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <USB_HC_Halt+0x3a>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d16c      	bne.n	80060d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006016:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d143      	bne.n	80060ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	440a      	add	r2, r1
 800603a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006042:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	440a      	add	r2, r1
 800605a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006062:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006082:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	3301      	adds	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006090:	d81d      	bhi.n	80060ce <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a8:	d0ec      	beq.n	8006084 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060aa:	e080      	b.n	80061ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060cc:	e06f      	b.n	80061ae <USB_HC_Halt+0x1f0>
          break;
 80060ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060d0:	e06d      	b.n	80061ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d143      	bne.n	800618a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	440a      	add	r2, r1
 8006118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006120:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	440a      	add	r2, r1
 8006138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006140:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	440a      	add	r2, r1
 8006158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006160:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	3301      	adds	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616e:	d81d      	bhi.n	80061ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006186:	d0ec      	beq.n	8006162 <USB_HC_Halt+0x1a4>
 8006188:	e011      	b.n	80061ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e000      	b.n	80061ae <USB_HC_Halt+0x1f0>
          break;
 80061ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	04da      	lsls	r2, r3, #19
 80061d8:	4b15      	ldr	r3, [pc, #84]	; (8006230 <USB_DoPing+0x74>)
 80061da:	4013      	ands	r3, r2
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006204:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	1ff80000 	.word	0x1ff80000

08006234 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f9a1 	bl	800558c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800624a:	2110      	movs	r1, #16
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff f9d9 	bl	8005604 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff f9fc 	bl	8005650 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	e01f      	b.n	800629e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006274:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800627c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006284:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3301      	adds	r3, #1
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d9dc      	bls.n	800625e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e034      	b.n	8006314 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	461a      	mov	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	3301      	adds	r3, #1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f0:	d80c      	bhi.n	800630c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006308:	d0ec      	beq.n	80062e4 <USB_StopHost+0xb0>
 800630a:	e000      	b.n	800630e <USB_StopHost+0xda>
        break;
 800630c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3301      	adds	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d9c7      	bls.n	80062aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006320:	461a      	mov	r2, r3
 8006322:	f04f 33ff 	mov.w	r3, #4294967295
 8006326:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff f91a 	bl	800556a <USB_EnableGlobalInt>

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b089      	sub	sp, #36	; 0x24
 8006344:	af04      	add	r7, sp, #16
 8006346:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006348:	2302      	movs	r3, #2
 800634a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800634c:	2301      	movs	r3, #1
 800634e:	2202      	movs	r2, #2
 8006350:	2102      	movs	r1, #2
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fc3a 	bl	8006bcc <USBH_FindInterface>
 8006358:	4603      	mov	r3, r0
 800635a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	2bff      	cmp	r3, #255	; 0xff
 8006360:	f000 812a 	beq.w	80065b8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc13 	bl	8006b94 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006374:	2050      	movs	r0, #80	; 0x50
 8006376:	f002 fff1 	bl	800935c <malloc>
 800637a:	4603      	mov	r3, r0
 800637c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	211a      	movs	r1, #26
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b25b      	sxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	da15      	bge.n	80063cc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	211a      	movs	r1, #26
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	211a      	movs	r1, #26
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fd21 	bl	8007e1a <USBH_AllocPipe>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	7819      	ldrb	r1, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	7858      	ldrb	r0, [r3, #1]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	8952      	ldrh	r2, [r2, #10]
 80063f8:	9202      	str	r2, [sp, #8]
 80063fa:	2203      	movs	r2, #3
 80063fc:	9201      	str	r2, [sp, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4623      	mov	r3, r4
 8006402:	4602      	mov	r2, r0
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fcd9 	bl	8007dbc <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f002 fee3 	bl	80091de <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006418:	2300      	movs	r3, #0
 800641a:	2200      	movs	r2, #0
 800641c:	210a      	movs	r1, #10
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fbd4 	bl	8006bcc <USBH_FindInterface>
 8006424:	4603      	mov	r3, r0
 8006426:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	2bff      	cmp	r3, #255	; 0xff
 800642c:	f000 80c4 	beq.w	80065b8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	211a      	movs	r1, #26
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	4413      	add	r3, r2
 800643c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b25b      	sxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	da16      	bge.n	8006476 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	211a      	movs	r1, #26
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	4413      	add	r3, r2
 8006454:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	211a      	movs	r1, #26
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	4413      	add	r3, r2
 800646a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	835a      	strh	r2, [r3, #26]
 8006474:	e015      	b.n	80064a2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	211a      	movs	r1, #26
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	211a      	movs	r1, #26
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	4413      	add	r3, r2
 8006498:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800649c:	881a      	ldrh	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	211a      	movs	r1, #26
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 3352 	addw	r3, r3, #850	; 0x352
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da16      	bge.n	80064e8 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	211a      	movs	r1, #26
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80064ca:	781a      	ldrb	r2, [r3, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	211a      	movs	r1, #26
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	835a      	strh	r2, [r3, #26]
 80064e6:	e015      	b.n	8006514 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	211a      	movs	r1, #26
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 3352 	addw	r3, r3, #850	; 0x352
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	211a      	movs	r1, #26
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	4413      	add	r3, r2
 800650a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	7b9b      	ldrb	r3, [r3, #14]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fc7d 	bl	8007e1a <USBH_AllocPipe>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	7bdb      	ldrb	r3, [r3, #15]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fc73 	bl	8007e1a <USBH_AllocPipe>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	7b59      	ldrb	r1, [r3, #13]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	7b98      	ldrb	r0, [r3, #14]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	8b12      	ldrh	r2, [r2, #24]
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	2202      	movs	r2, #2
 8006558:	9201      	str	r2, [sp, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	4623      	mov	r3, r4
 800655e:	4602      	mov	r2, r0
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 fc2b 	bl	8007dbc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	7b19      	ldrb	r1, [r3, #12]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	7bd8      	ldrb	r0, [r3, #15]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	8b52      	ldrh	r2, [r2, #26]
 800657e:	9202      	str	r2, [sp, #8]
 8006580:	2202      	movs	r2, #2
 8006582:	9201      	str	r2, [sp, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4623      	mov	r3, r4
 8006588:	4602      	mov	r2, r0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fc16 	bl	8007dbc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	7b5b      	ldrb	r3, [r3, #13]
 800659c:	2200      	movs	r2, #0
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f002 fe1c 	bl	80091de <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	7b1b      	ldrb	r3, [r3, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f002 fe15 	bl	80091de <USBH_LL_SetToggle>
      status = USBH_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd90      	pop	{r4, r7, pc}

080065c2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00e      	beq.n	80065fa <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fc09 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fc31 	bl	8007e56 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	7b1b      	ldrb	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	7b1b      	ldrb	r3, [r3, #12]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fbf6 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fc1e 	bl	8007e56 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7b5b      	ldrb	r3, [r3, #13]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7b5b      	ldrb	r3, [r3, #13]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fbe3 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b5b      	ldrb	r3, [r3, #13]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fc0b 	bl	8007e56 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	4618      	mov	r0, r3
 800665c:	f002 fe86 	bl	800936c <free>
    phost->pActiveClass->pData = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006666:	2200      	movs	r2, #0
 8006668:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800667c:	2302      	movs	r3, #2
 800667e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3340      	adds	r3, #64	; 0x40
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8b2 	bl	80067fa <GetLineCoding>
 8006696:	4603      	mov	r3, r0
 8006698:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066a6:	2102      	movs	r1, #2
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
  }
  return status;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d877      	bhi.n	80067cc <USBH_CDC_Process+0x114>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <USBH_CDC_Process+0x2c>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f9 	.word	0x080066f9
 80066e8:	080066ff 	.word	0x080066ff
 80066ec:	0800672f 	.word	0x0800672f
 80066f0:	080067a3 	.word	0x080067a3
 80066f4:	080067b1 	.word	0x080067b1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	73fb      	strb	r3, [r7, #15]
    break;
 80066fc:	e06d      	b.n	80067da <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f897 	bl	8006838 <SetLineCoding>
 800670a:	4603      	mov	r3, r0
 800670c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800671c:	e058      	b.n	80067d0 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d055      	beq.n	80067d0 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2204      	movs	r2, #4
 8006728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800672c:	e050      	b.n	80067d0 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	3340      	adds	r3, #64	; 0x40
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f860 	bl	80067fa <GetLineCoding>
 800673a:	4603      	mov	r3, r0
 800673c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d126      	bne.n	8006792 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	791b      	ldrb	r3, [r3, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d13b      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d133      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006778:	429a      	cmp	r2, r3
 800677a:	d12b      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006784:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006786:	429a      	cmp	r2, r3
 8006788:	d124      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f95a 	bl	8006a44 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006790:	e020      	b.n	80067d4 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d01d      	beq.n	80067d4 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80067a0:	e018      	b.n	80067d4 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f867 	bl	8006876 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8dc 	bl	8006966 <CDC_ProcessReception>
    break;
 80067ae:	e014      	b.n	80067da <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fece 	bl	8007554 <USBH_ClrFeature>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80067ca:	e005      	b.n	80067d8 <USBH_CDC_Process+0x120>

  default:
    break;
 80067cc:	bf00      	nop
 80067ce:	e004      	b.n	80067da <USBH_CDC_Process+0x122>
    break;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <USBH_CDC_Process+0x122>
    break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <USBH_CDC_Process+0x122>
    break;
 80067d8:	bf00      	nop

  }

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22a1      	movs	r2, #161	; 0xa1
 8006808:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2207      	movs	r2, #7
 8006820:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2207      	movs	r2, #7
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f873 	bl	8007914 <USBH_CtlReq>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2221      	movs	r2, #33	; 0x21
 8006846:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2207      	movs	r2, #7
 800685e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2207      	movs	r2, #7
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f854 	bl	8007914 <USBH_CtlReq>
 800686c:	4603      	mov	r3, r0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af02      	add	r7, sp, #8
 800687c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006888:	2300      	movs	r3, #0
 800688a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006892:	2b01      	cmp	r3, #1
 8006894:	d002      	beq.n	800689c <CDC_ProcessTransmission+0x26>
 8006896:	2b02      	cmp	r3, #2
 8006898:	d025      	beq.n	80068e6 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800689a:	e060      	b.n	800695e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	8b12      	ldrh	r2, [r2, #24]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d90c      	bls.n	80068c2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8b1a      	ldrh	r2, [r3, #24]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7b58      	ldrb	r0, [r3, #13]
 80068b4:	2301      	movs	r3, #1
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4603      	mov	r3, r0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fa3b 	bl	8007d36 <USBH_BulkSendData>
 80068c0:	e00c      	b.n	80068dc <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	7b58      	ldrb	r0, [r3, #13]
 80068d0:	2301      	movs	r3, #1
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fa2d 	bl	8007d36 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80068e4:	e03b      	b.n	800695e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	7b5b      	ldrb	r3, [r3, #13]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f002 fc55 	bl	800919c <USBH_LL_GetURBState>
 80068f2:	4603      	mov	r3, r0
 80068f4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d128      	bne.n	800694e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	8b12      	ldrh	r2, [r2, #24]
 8006904:	4293      	cmp	r3, r2
 8006906:	d90e      	bls.n	8006926 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	8b12      	ldrh	r2, [r2, #24]
 8006910:	1a9a      	subs	r2, r3, r2
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	8b12      	ldrh	r2, [r2, #24]
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	61da      	str	r2, [r3, #28]
 8006924:	e002      	b.n	800692c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800693c:	e00e      	b.n	800695c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f868 	bl	8006a1c <USBH_CDC_TransmitCallback>
    break;
 800694c:	e006      	b.n	800695c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d103      	bne.n	800695c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800695c:	bf00      	nop
  }
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b086      	sub	sp, #24
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006978:	2300      	movs	r3, #0
 800697a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006982:	2b03      	cmp	r3, #3
 8006984:	d002      	beq.n	800698c <CDC_ProcessReception+0x26>
 8006986:	2b04      	cmp	r3, #4
 8006988:	d00e      	beq.n	80069a8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800698a:	e043      	b.n	8006a14 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a19      	ldr	r1, [r3, #32]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	8b5a      	ldrh	r2, [r3, #26]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	7b1b      	ldrb	r3, [r3, #12]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f9f1 	bl	8007d80 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2204      	movs	r2, #4
 80069a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80069a6:	e035      	b.n	8006a14 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f002 fbf4 	bl	800919c <USBH_LL_GetURBState>
 80069b4:	4603      	mov	r3, r0
 80069b6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d129      	bne.n	8006a12 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	7b1b      	ldrb	r3, [r3, #12]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f002 fb57 	bl	8009078 <USBH_LL_GetLastXferSize>
 80069ca:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d016      	beq.n	8006a04 <CDC_ProcessReception+0x9e>
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	8b5b      	ldrh	r3, [r3, #26]
 80069da:	461a      	mov	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4293      	cmp	r3, r2
 80069e0:	d910      	bls.n	8006a04 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a1a      	ldr	r2, [r3, #32]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	441a      	add	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2203      	movs	r2, #3
 80069fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006a02:	e006      	b.n	8006a12 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f80f 	bl	8006a30 <USBH_CDC_ReceiveCallback>
    break;
 8006a12:	bf00      	nop
  }
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e019      	b.n	8006aa4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	79fa      	ldrb	r2, [r7, #7]
 8006a74:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f80f 	bl	8006aac <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f002 fa39 	bl	8008f14 <USBH_LL_Init>

  return USBH_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006ab8:	e008      	b.n	8006acc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	32e0      	adds	r2, #224	; 0xe0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b0e      	cmp	r3, #14
 8006ad0:	d9f3      	bls.n	8006aba <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e009      	b.n	8006aec <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af2:	d3f1      	bcc.n	8006ad8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2240      	movs	r2, #64	; 0x40
 8006b18:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	33dc      	adds	r3, #220	; 0xdc
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	e004      	b.n	8006b86 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	e001      	b.n	8006b86 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d204      	bcs.n	8006bba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006bb8:	e001      	b.n	8006bbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	70fb      	strb	r3, [r7, #3]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70bb      	strb	r3, [r7, #2]
 8006be2:	4613      	mov	r3, r2
 8006be4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006bf4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bf6:	e025      	b.n	8006c44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	221a      	movs	r2, #26
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	3308      	adds	r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	3302      	adds	r3, #2
 8006c08:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	795b      	ldrb	r3, [r3, #5]
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d002      	beq.n	8006c1a <USBH_FindInterface+0x4e>
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2bff      	cmp	r3, #255	; 0xff
 8006c18:	d111      	bne.n	8006c3e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006c1e:	78ba      	ldrb	r2, [r7, #2]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d002      	beq.n	8006c2a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c24:	78bb      	ldrb	r3, [r7, #2]
 8006c26:	2bff      	cmp	r3, #255	; 0xff
 8006c28:	d109      	bne.n	8006c3e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c2e:	787a      	ldrb	r2, [r7, #1]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d002      	beq.n	8006c3a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c34:	787b      	ldrb	r3, [r7, #1]
 8006c36:	2bff      	cmp	r3, #255	; 0xff
 8006c38:	d101      	bne.n	8006c3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	e006      	b.n	8006c4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	3301      	adds	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d9d6      	bls.n	8006bf8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c4a:	23ff      	movs	r3, #255	; 0xff
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 f993 	bl	8008f8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006c66:	2101      	movs	r1, #1
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 faaa 	bl	80091c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af04      	add	r7, sp, #16
 8006c7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c80:	2302      	movs	r3, #2
 8006c82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 faec 	bl	8007266 <USBH_IsPortEnabled>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10c      	bne.n	8006cae <USBH_Process+0x36>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d002      	beq.n	8006cae <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2203      	movs	r2, #3
 8006cac:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b0b      	cmp	r3, #11
 8006cb6:	f200 814c 	bhi.w	8006f52 <USBH_Process+0x2da>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <USBH_Process+0x48>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006d13 	.word	0x08006d13
 8006cc8:	08006d27 	.word	0x08006d27
 8006ccc:	08006f2d 	.word	0x08006f2d
 8006cd0:	08006f53 	.word	0x08006f53
 8006cd4:	08006db5 	.word	0x08006db5
 8006cd8:	08006ee3 	.word	0x08006ee3
 8006cdc:	08006de5 	.word	0x08006de5
 8006ce0:	08006e05 	.word	0x08006e05
 8006ce4:	08006e25 	.word	0x08006e25
 8006ce8:	08006e53 	.word	0x08006e53
 8006cec:	08006f15 	.word	0x08006f15
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 812c 	beq.w	8006f56 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006d04:	20c8      	movs	r0, #200	; 0xc8
 8006d06:	f002 fa9d 	bl	8009244 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f002 f999 	bl	8009042 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006d10:	e121      	b.n	8006f56 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 811e 	bne.w	8006f5a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006d24:	e119      	b.n	8006f5a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006d26:	2064      	movs	r0, #100	; 0x64
 8006d28:	f002 fa8c 	bl	8009244 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 f963 	bl	8008ff8 <USBH_LL_GetSpeed>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2205      	movs	r2, #5
 8006d40:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 f868 	bl	8007e1a <USBH_AllocPipe>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006d52:	2180      	movs	r1, #128	; 0x80
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f860 	bl	8007e1a <USBH_AllocPipe>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7919      	ldrb	r1, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006d76:	b292      	uxth	r2, r2
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	9201      	str	r2, [sp, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4603      	mov	r3, r0
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f819 	bl	8007dbc <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7959      	ldrb	r1, [r3, #5]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4603      	mov	r3, r0
 8006daa:	2200      	movs	r2, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f805 	bl	8007dbc <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006db2:	e0e3      	b.n	8006f7c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8e7 	bl	8006f88 <USBH_HandleEnum>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 80ce 	bne.w	8006f5e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d103      	bne.n	8006ddc <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006dda:	e0c0      	b.n	8006f5e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2207      	movs	r2, #7
 8006de0:	701a      	strb	r2, [r3, #0]
    break;
 8006de2:	e0bc      	b.n	8006f5e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80b9 	beq.w	8006f62 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006df6:	2101      	movs	r1, #1
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e02:	e0ae      	b.n	8006f62 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb59 	bl	80074c6 <USBH_SetCfg>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80a5 	bne.w	8006f66 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2209      	movs	r2, #9
 8006e20:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e22:	e0a0      	b.n	8006f66 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e32:	2101      	movs	r1, #1
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fb69 	bl	800750c <USBH_SetFeature>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8094 	bne.w	8006f6a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220a      	movs	r2, #10
 8006e46:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e48:	e08f      	b.n	8006f6a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	701a      	strb	r2, [r3, #0]
    break;
 8006e50:	e08b      	b.n	8006f6a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8088 	beq.w	8006f6e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e017      	b.n	8006e9c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	33dc      	adds	r3, #220	; 0xdc
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	791a      	ldrb	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d108      	bne.n	8006e96 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	33dc      	adds	r3, #220	; 0xdc
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0e4      	beq.n	8006e6c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d016      	beq.n	8006eda <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eca:	2103      	movs	r1, #3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ed0:	e04d      	b.n	8006f6e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220d      	movs	r2, #13
 8006ed6:	701a      	strb	r2, [r3, #0]
    break;
 8006ed8:	e049      	b.n	8006f6e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220d      	movs	r2, #13
 8006ede:	701a      	strb	r2, [r3, #0]
    break;
 8006ee0:	e045      	b.n	8006f6e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d136      	bne.n	8006f72 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	220b      	movs	r2, #11
 8006f08:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006f0a:	e032      	b.n	8006f72 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220d      	movs	r2, #13
 8006f10:	701a      	strb	r2, [r3, #0]
    break;
 8006f12:	e02e      	b.n	8006f72 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d02b      	beq.n	8006f76 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
    }
    break;
 8006f2a:	e024      	b.n	8006f76 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fdbd 	bl	8006aac <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01e      	beq.n	8006f7a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006f50:	e013      	b.n	8006f7a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006f52:	bf00      	nop
 8006f54:	e012      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f56:	bf00      	nop
 8006f58:	e010      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f5a:	bf00      	nop
 8006f5c:	e00e      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f5e:	bf00      	nop
 8006f60:	e00c      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f62:	bf00      	nop
 8006f64:	e00a      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f66:	bf00      	nop
 8006f68:	e008      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f6a:	bf00      	nop
 8006f6c:	e006      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f6e:	bf00      	nop
 8006f70:	e004      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f72:	bf00      	nop
 8006f74:	e002      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f76:	bf00      	nop
 8006f78:	e000      	b.n	8006f7c <USBH_Process+0x304>
    break;
 8006f7a:	bf00      	nop
  }
 return USBH_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af04      	add	r7, sp, #16
 8006f8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f90:	2301      	movs	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b07      	cmp	r3, #7
 8006f9a:	f200 80f8 	bhi.w	800718e <USBH_HandleEnum+0x206>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBH_HandleEnum+0x1c>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08007037 	.word	0x08007037
 8006fac:	0800704f 	.word	0x0800704f
 8006fb0:	080070c5 	.word	0x080070c5
 8006fb4:	080070db 	.word	0x080070db
 8006fb8:	080070f7 	.word	0x080070f7
 8006fbc:	0800712b 	.word	0x0800712b
 8006fc0:	0800715f 	.word	0x0800715f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006fc4:	2108      	movs	r1, #8
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9ad 	bl	8007326 <USBH_Get_DevDesc>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 80df 	bne.w	8007192 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7919      	ldrb	r1, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	9202      	str	r2, [sp, #8]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4603      	mov	r3, r0
 8007004:	2280      	movs	r2, #128	; 0x80
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fed8 	bl	8007dbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7959      	ldrb	r1, [r3, #5]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007020:	b292      	uxth	r2, r2
 8007022:	9202      	str	r2, [sp, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	9201      	str	r2, [sp, #4]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4603      	mov	r3, r0
 800702c:	2200      	movs	r2, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fec4 	bl	8007dbc <USBH_OpenPipe>

    }
    break;
 8007034:	e0ad      	b.n	8007192 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007036:	2112      	movs	r1, #18
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f974 	bl	8007326 <USBH_Get_DevDesc>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 80a8 	bne.w	8007196 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800704c:	e0a3      	b.n	8007196 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800704e:	2101      	movs	r1, #1
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa14 	bl	800747e <USBH_SetAddress>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 809e 	bne.w	800719a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800705e:	2002      	movs	r0, #2
 8007060:	f002 f8f0 	bl	8009244 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2203      	movs	r2, #3
 8007070:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	7919      	ldrb	r1, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007086:	b292      	uxth	r2, r2
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	2280      	movs	r2, #128	; 0x80
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fe91 	bl	8007dbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7959      	ldrb	r1, [r3, #5]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80070ae:	b292      	uxth	r2, r2
 80070b0:	9202      	str	r2, [sp, #8]
 80070b2:	2200      	movs	r2, #0
 80070b4:	9201      	str	r2, [sp, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4603      	mov	r3, r0
 80070ba:	2200      	movs	r2, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fe7d 	bl	8007dbc <USBH_OpenPipe>
    }
    break;
 80070c2:	e06a      	b.n	800719a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80070c4:	2109      	movs	r1, #9
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f955 	bl	8007376 <USBH_Get_CfgDesc>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d165      	bne.n	800719e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070d8:	e061      	b.n	800719e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f947 	bl	8007376 <USBH_Get_CfgDesc>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d159      	bne.n	80071a2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2205      	movs	r2, #5
 80070f2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070f4:	e055      	b.n	80071a2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800710c:	23ff      	movs	r3, #255	; 0xff
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f955 	bl	80073be <USBH_Get_StringDesc>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d145      	bne.n	80071a6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2206      	movs	r2, #6
 800711e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007120:	e041      	b.n	80071a6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2206      	movs	r2, #6
 8007126:	705a      	strb	r2, [r3, #1]
    break;
 8007128:	e03d      	b.n	80071a6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007130:	2b00      	cmp	r3, #0
 8007132:	d010      	beq.n	8007156 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007140:	23ff      	movs	r3, #255	; 0xff
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f93b 	bl	80073be <USBH_Get_StringDesc>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d12d      	bne.n	80071aa <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2207      	movs	r2, #7
 8007152:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007154:	e029      	b.n	80071aa <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2207      	movs	r2, #7
 800715a:	705a      	strb	r2, [r3, #1]
    break;
 800715c:	e025      	b.n	80071aa <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00f      	beq.n	8007188 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007174:	23ff      	movs	r3, #255	; 0xff
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f921 	bl	80073be <USBH_Get_StringDesc>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d115      	bne.n	80071ae <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007186:	e012      	b.n	80071ae <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]
    break;
 800718c:	e00f      	b.n	80071ae <USBH_HandleEnum+0x226>

  default:
    break;
 800718e:	bf00      	nop
 8007190:	e00e      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 8007192:	bf00      	nop
 8007194:	e00c      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 8007196:	bf00      	nop
 8007198:	e00a      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 800719a:	bf00      	nop
 800719c:	e008      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 800719e:	bf00      	nop
 80071a0:	e006      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <USBH_HandleEnum+0x228>
    break;
 80071ae:	bf00      	nop
  }
  return Status;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop

080071bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f804 	bl	80071fe <USBH_HandleSof>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b0b      	cmp	r3, #11
 800720e:	d10a      	bne.n	8007226 <USBH_HandleSof+0x28>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
  }
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800723e:	bf00      	nop
}
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800725a:	bf00      	nop
}
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10f      	bne.n	80072b2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072aa:	2104      	movs	r1, #4
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
 80072b0:	e007      	b.n	80072c2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d102      	bne.n	80072c2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fe74 	bl	8008fc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	791b      	ldrb	r3, [r3, #4]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fdb8 	bl	8007e56 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	795b      	ldrb	r3, [r3, #5]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fdb2 	bl	8007e56 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800730a:	2105      	movs	r1, #5
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fe3b 	bl	8008f8c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2203      	movs	r2, #3
 800731a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b086      	sub	sp, #24
 800732a:	af02      	add	r7, sp, #8
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	b29b      	uxth	r3, r3
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4613      	mov	r3, r2
 8007340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007344:	2100      	movs	r1, #0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f864 	bl	8007414 <USBH_GetDescriptor>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10a      	bne.n	800736c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f203 3022 	addw	r0, r3, #802	; 0x322
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007362:	78fa      	ldrb	r2, [r7, #3]
 8007364:	b292      	uxth	r2, r2
 8007366:	4619      	mov	r1, r3
 8007368:	f000 f918 	bl	800759c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af02      	add	r7, sp, #8
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	331c      	adds	r3, #28
 8007386:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007388:	887b      	ldrh	r3, [r7, #2]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007392:	2100      	movs	r1, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f83d 	bl	8007414 <USBH_GetDescriptor>
 800739a:	4603      	mov	r3, r0
 800739c:	72fb      	strb	r3, [r7, #11]
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80073aa:	887a      	ldrh	r2, [r7, #2]
 80073ac:	68f9      	ldr	r1, [r7, #12]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f964 	bl	800767c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b088      	sub	sp, #32
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	461a      	mov	r2, r3
 80073ca:	460b      	mov	r3, r1
 80073cc:	72fb      	strb	r3, [r7, #11]
 80073ce:	4613      	mov	r3, r2
 80073d0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073da:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80073e2:	893b      	ldrh	r3, [r7, #8]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	460b      	mov	r3, r1
 80073e8:	2100      	movs	r1, #0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f812 	bl	8007414 <USBH_GetDescriptor>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007400:	893a      	ldrh	r2, [r7, #8]
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fa37 	bl	8007878 <USBH_ParseStringDesc>
  }
  return status;
 800740a:	7dfb      	ldrb	r3, [r7, #23]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	72fb      	strb	r3, [r7, #11]
 8007422:	4613      	mov	r3, r2
 8007424:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	789b      	ldrb	r3, [r3, #2]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d11c      	bne.n	8007468 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007434:	b2da      	uxtb	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2206      	movs	r2, #6
 800743e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	893a      	ldrh	r2, [r7, #8]
 8007444:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007446:	893b      	ldrh	r3, [r7, #8]
 8007448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800744c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007450:	d104      	bne.n	800745c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f240 4209 	movw	r2, #1033	; 0x409
 8007458:	829a      	strh	r2, [r3, #20]
 800745a:	e002      	b.n	8007462 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8b3a      	ldrh	r2, [r7, #24]
 8007466:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007468:	8b3b      	ldrh	r3, [r7, #24]
 800746a:	461a      	mov	r2, r3
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa50 	bl	8007914 <USBH_CtlReq>
 8007474:	4603      	mov	r3, r0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	789b      	ldrb	r3, [r3, #2]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d10f      	bne.n	80074b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2205      	movs	r2, #5
 800749c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa2c 	bl	8007914 <USBH_CtlReq>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10e      	bne.n	80074f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2209      	movs	r2, #9
 80074e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80074f8:	2200      	movs	r2, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fa09 	bl	8007914 <USBH_CtlReq>
 8007502:	4603      	mov	r3, r0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	789b      	ldrb	r3, [r3, #2]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10f      	bne.n	8007540 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2203      	movs	r2, #3
 800752a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007540:	2200      	movs	r2, #0
 8007542:	2100      	movs	r1, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f9e5 	bl	8007914 <USBH_CtlReq>
 800754a:	4603      	mov	r3, r0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	789b      	ldrb	r3, [r3, #2]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10f      	bne.n	8007588 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007588:	2200      	movs	r2, #0
 800758a:	2100      	movs	r1, #0
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9c1 	bl	8007914 <USBH_CtlReq>
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	785a      	ldrb	r2, [r3, #1]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3302      	adds	r3, #2
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3303      	adds	r3, #3
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	791a      	ldrb	r2, [r3, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	795a      	ldrb	r2, [r3, #5]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	799a      	ldrb	r2, [r3, #6]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	79da      	ldrb	r2, [r3, #7]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d939      	bls.n	8007670 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3308      	adds	r3, #8
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b29a      	uxth	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	3309      	adds	r3, #9
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	b29b      	uxth	r3, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	330a      	adds	r3, #10
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b29a      	uxth	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	330b      	adds	r3, #11
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	b29b      	uxth	r3, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	330c      	adds	r3, #12
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b29a      	uxth	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	330d      	adds	r3, #13
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	b29b      	uxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7b9a      	ldrb	r2, [r3, #14]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	7bda      	ldrb	r2, [r3, #15]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	7c1a      	ldrb	r2, [r3, #16]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	7c5a      	ldrb	r2, [r3, #17]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	745a      	strb	r2, [r3, #17]
  }
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	785a      	ldrb	r2, [r3, #1]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3302      	adds	r3, #2
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	3303      	adds	r3, #3
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	791a      	ldrb	r2, [r3, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	795a      	ldrb	r2, [r3, #5]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	799a      	ldrb	r2, [r3, #6]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	79da      	ldrb	r2, [r3, #7]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7a1a      	ldrb	r2, [r3, #8]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b09      	cmp	r3, #9
 80076f6:	d95f      	bls.n	80077b8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80076f8:	2309      	movs	r3, #9
 80076fa:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007700:	e051      	b.n	80077a6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007702:	f107 0316 	add.w	r3, r7, #22
 8007706:	4619      	mov	r1, r3
 8007708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800770a:	f000 f8e8 	bl	80078de <USBH_GetNextDesc>
 800770e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b04      	cmp	r3, #4
 8007716:	d146      	bne.n	80077a6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800771c:	221a      	movs	r2, #26
 800771e:	fb02 f303 	mul.w	r3, r2, r3
 8007722:	3308      	adds	r3, #8
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	3302      	adds	r3, #2
 800772a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800772c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800772e:	69f8      	ldr	r0, [r7, #28]
 8007730:	f000 f846 	bl	80077c0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800773a:	2300      	movs	r3, #0
 800773c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800773e:	e022      	b.n	8007786 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007740:	f107 0316 	add.w	r3, r7, #22
 8007744:	4619      	mov	r1, r3
 8007746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007748:	f000 f8c9 	bl	80078de <USBH_GetNextDesc>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d117      	bne.n	8007786 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800775a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800775e:	3201      	adds	r2, #1
 8007760:	00d2      	lsls	r2, r2, #3
 8007762:	211a      	movs	r1, #26
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	4413      	add	r3, r2
 800776a:	3308      	adds	r3, #8
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	3304      	adds	r3, #4
 8007772:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007776:	69b8      	ldr	r0, [r7, #24]
 8007778:	f000 f851 	bl	800781e <USBH_ParseEPDesc>
            ep_ix++;
 800777c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007780:	3301      	adds	r3, #1
 8007782:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	791b      	ldrb	r3, [r3, #4]
 800778a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800778e:	429a      	cmp	r2, r3
 8007790:	d204      	bcs.n	800779c <USBH_ParseCfgDesc+0x120>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	885a      	ldrh	r2, [r3, #2]
 8007796:	8afb      	ldrh	r3, [r7, #22]
 8007798:	429a      	cmp	r2, r3
 800779a:	d8d1      	bhi.n	8007740 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800779c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077a0:	3301      	adds	r3, #1
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d804      	bhi.n	80077b8 <USBH_ParseCfgDesc+0x13c>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	885a      	ldrh	r2, [r3, #2]
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d8a4      	bhi.n	8007702 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80077b8:	bf00      	nop
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	785a      	ldrb	r2, [r3, #1]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	789a      	ldrb	r2, [r3, #2]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	78da      	ldrb	r2, [r3, #3]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	791a      	ldrb	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	795a      	ldrb	r2, [r3, #5]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	799a      	ldrb	r2, [r3, #6]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	79da      	ldrb	r2, [r3, #7]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	7a1a      	ldrb	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	721a      	strb	r2, [r3, #8]
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	785a      	ldrb	r2, [r3, #1]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	789a      	ldrb	r2, [r3, #2]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	78da      	ldrb	r2, [r3, #3]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b29a      	uxth	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	3305      	adds	r3, #5
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	b29b      	uxth	r3, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	799a      	ldrb	r2, [r3, #6]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	719a      	strb	r2, [r3, #6]
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3301      	adds	r3, #1
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b03      	cmp	r3, #3
 800788e:	d120      	bne.n	80078d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	1e9a      	subs	r2, r3, #2
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	4293      	cmp	r3, r2
 800789a:	bf28      	it	cs
 800789c:	4613      	movcs	r3, r2
 800789e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3302      	adds	r3, #2
 80078a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078a6:	2300      	movs	r3, #0
 80078a8:	82fb      	strh	r3, [r7, #22]
 80078aa:	e00b      	b.n	80078c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078ac:	8afb      	ldrh	r3, [r7, #22]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078be:	8afb      	ldrh	r3, [r7, #22]
 80078c0:	3302      	adds	r3, #2
 80078c2:	82fb      	strh	r3, [r7, #22]
 80078c4:	8afa      	ldrh	r2, [r7, #22]
 80078c6:	8abb      	ldrh	r3, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d3ef      	bcc.n	80078ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
  }
}
 80078d2:	bf00      	nop
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4413      	add	r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d002      	beq.n	8007934 <USBH_CtlReq+0x20>
 800792e:	2b02      	cmp	r3, #2
 8007930:	d00f      	beq.n	8007952 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007932:	e034      	b.n	800799e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
    break;
 8007950:	e025      	b.n	800799e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f828 	bl	80079a8 <USBH_HandleControl>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]
    break;
 8007972:	e013      	b.n	800799c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d108      	bne.n	800798c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
    break;
 800798a:	e007      	b.n	800799c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d104      	bne.n	800799c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007998:	2302      	movs	r3, #2
 800799a:	75fb      	strb	r3, [r7, #23]
    break;
 800799c:	bf00      	nop
  }
  return status;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7e1b      	ldrb	r3, [r3, #24]
 80079bc:	3b01      	subs	r3, #1
 80079be:	2b0a      	cmp	r3, #10
 80079c0:	f200 814c 	bhi.w	8007c5c <USBH_HandleControl+0x2b4>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBH_HandleControl+0x24>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	08007a13 	.word	0x08007a13
 80079d4:	08007a7d 	.word	0x08007a7d
 80079d8:	08007aa3 	.word	0x08007aa3
 80079dc:	08007adb 	.word	0x08007adb
 80079e0:	08007b07 	.word	0x08007b07
 80079e4:	08007b59 	.word	0x08007b59
 80079e8:	08007b7b 	.word	0x08007b7b
 80079ec:	08007bb7 	.word	0x08007bb7
 80079f0:	08007bdf 	.word	0x08007bdf
 80079f4:	08007c1d 	.word	0x08007c1d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f103 0110 	add.w	r1, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f939 	bl	8007c7c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	761a      	strb	r2, [r3, #24]
    break;
 8007a10:	e12f      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fbbf 	bl	800919c <USBH_LL_GetURBState>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d11e      	bne.n	8007a66 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7c1b      	ldrb	r3, [r3, #16]
 8007a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a30:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8adb      	ldrh	r3, [r3, #22]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007a3a:	7b7b      	ldrb	r3, [r7, #13]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d103      	bne.n	8007a48 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a46:	e10b      	b.n	8007c60 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	761a      	strb	r2, [r3, #24]
    break;
 8007a4e:	e107      	b.n	8007c60 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007a50:	7b7b      	ldrb	r3, [r7, #13]
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d103      	bne.n	8007a5e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2209      	movs	r2, #9
 8007a5a:	761a      	strb	r2, [r3, #24]
    break;
 8007a5c:	e100      	b.n	8007c60 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2207      	movs	r2, #7
 8007a62:	761a      	strb	r2, [r3, #24]
    break;
 8007a64:	e0fc      	b.n	8007c60 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d003      	beq.n	8007a74 <USBH_HandleControl+0xcc>
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	f040 80f6 	bne.w	8007c60 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	220b      	movs	r2, #11
 8007a78:	761a      	strb	r2, [r3, #24]
    break;
 8007a7a:	e0f1      	b.n	8007c60 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	899a      	ldrh	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	791b      	ldrb	r3, [r3, #4]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f930 	bl	8007cfa <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	761a      	strb	r2, [r3, #24]
    break;
 8007aa0:	e0e7      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	791b      	ldrb	r3, [r3, #4]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fb77 	bl	800919c <USBH_LL_GetURBState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d102      	bne.n	8007abe <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2209      	movs	r2, #9
 8007abc:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d102      	bne.n	8007aca <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ac8:	e0cc      	b.n	8007c64 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	f040 80c9 	bne.w	8007c64 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	220b      	movs	r2, #11
 8007ad6:	761a      	strb	r2, [r3, #24]
    break;
 8007ad8:	e0c4      	b.n	8007c64 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	899a      	ldrh	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7958      	ldrb	r0, [r3, #5]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4603      	mov	r3, r0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8df 	bl	8007cb0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2206      	movs	r2, #6
 8007b02:	761a      	strb	r2, [r3, #24]
    break;
 8007b04:	e0b5      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	795b      	ldrb	r3, [r3, #5]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fb45 	bl	800919c <USBH_LL_GetURBState>
 8007b12:	4603      	mov	r3, r0
 8007b14:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d103      	bne.n	8007b24 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2207      	movs	r2, #7
 8007b20:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b22:	e0a1      	b.n	8007c68 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d105      	bne.n	8007b36 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220c      	movs	r2, #12
 8007b2e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007b30:	2303      	movs	r3, #3
 8007b32:	73fb      	strb	r3, [r7, #15]
    break;
 8007b34:	e098      	b.n	8007c68 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d103      	bne.n	8007b44 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2205      	movs	r2, #5
 8007b40:	761a      	strb	r2, [r3, #24]
    break;
 8007b42:	e091      	b.n	8007c68 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	f040 808e 	bne.w	8007c68 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	220b      	movs	r2, #11
 8007b50:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]
    break;
 8007b56:	e087      	b.n	8007c68 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	791b      	ldrb	r3, [r3, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8ca 	bl	8007cfa <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2208      	movs	r2, #8
 8007b76:	761a      	strb	r2, [r3, #24]

    break;
 8007b78:	e07b      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fb0b 	bl	800919c <USBH_LL_GetURBState>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d105      	bne.n	8007b9c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	220d      	movs	r2, #13
 8007b94:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b9a:	e067      	b.n	8007c6c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d103      	bne.n	8007baa <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	220b      	movs	r2, #11
 8007ba6:	761a      	strb	r2, [r3, #24]
    break;
 8007ba8:	e060      	b.n	8007c6c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	d15d      	bne.n	8007c6c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e05a      	b.n	8007c6c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	795a      	ldrb	r2, [r3, #5]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f873 	bl	8007cb0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	220a      	movs	r2, #10
 8007bda:	761a      	strb	r2, [r3, #24]
    break;
 8007bdc:	e049      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	795b      	ldrb	r3, [r3, #5]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fad9 	bl	800919c <USBH_LL_GetURBState>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d105      	bne.n	8007c00 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	220d      	movs	r2, #13
 8007bfc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007bfe:	e037      	b.n	8007c70 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d103      	bne.n	8007c0e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2209      	movs	r2, #9
 8007c0a:	761a      	strb	r2, [r3, #24]
    break;
 8007c0c:	e030      	b.n	8007c70 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d12d      	bne.n	8007c70 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	220b      	movs	r2, #11
 8007c18:	761a      	strb	r2, [r3, #24]
    break;
 8007c1a:	e029      	b.n	8007c70 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7e5b      	ldrb	r3, [r3, #25]
 8007c20:	3301      	adds	r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	765a      	strb	r2, [r3, #25]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7e5b      	ldrb	r3, [r3, #25]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d809      	bhi.n	8007c44 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f9c6 	bl	8008fc2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007c42:	e016      	b.n	8007c72 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c4a:	2106      	movs	r1, #6
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5a:	e00a      	b.n	8007c72 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007c5c:	bf00      	nop
 8007c5e:	e008      	b.n	8007c72 <USBH_HandleControl+0x2ca>
    break;
 8007c60:	bf00      	nop
 8007c62:	e006      	b.n	8007c72 <USBH_HandleControl+0x2ca>
    break;
 8007c64:	bf00      	nop
 8007c66:	e004      	b.n	8007c72 <USBH_HandleControl+0x2ca>
    break;
 8007c68:	bf00      	nop
 8007c6a:	e002      	b.n	8007c72 <USBH_HandleControl+0x2ca>
    break;
 8007c6c:	bf00      	nop
 8007c6e:	e000      	b.n	8007c72 <USBH_HandleControl+0x2ca>
    break;
 8007c70:	bf00      	nop
  }
  return status;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af04      	add	r7, sp, #16
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c8a:	79f9      	ldrb	r1, [r7, #7]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9303      	str	r3, [sp, #12]
 8007c90:	2308      	movs	r3, #8
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f001 fa4a 	bl	800913a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	80fb      	strh	r3, [r7, #6]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007cd4:	7979      	ldrb	r1, [r7, #5]
 8007cd6:	7e3b      	ldrb	r3, [r7, #24]
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 fa25 	bl	800913a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b088      	sub	sp, #32
 8007cfe:	af04      	add	r7, sp, #16
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	460b      	mov	r3, r1
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d10:	7979      	ldrb	r1, [r7, #5]
 8007d12:	2300      	movs	r3, #0
 8007d14:	9303      	str	r3, [sp, #12]
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	9302      	str	r3, [sp, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	2301      	movs	r3, #1
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	2300      	movs	r3, #0
 8007d24:	2201      	movs	r2, #1
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 fa07 	bl	800913a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d2c:	2300      	movs	r3, #0

}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b088      	sub	sp, #32
 8007d3a:	af04      	add	r7, sp, #16
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	4611      	mov	r1, r2
 8007d42:	461a      	mov	r2, r3
 8007d44:	460b      	mov	r3, r1
 8007d46:	80fb      	strh	r3, [r7, #6]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d5a:	7979      	ldrb	r1, [r7, #5]
 8007d5c:	7e3b      	ldrb	r3, [r7, #24]
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	9302      	str	r3, [sp, #8]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f001 f9e2 	bl	800913a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af04      	add	r7, sp, #16
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	460b      	mov	r3, r1
 8007d90:	80fb      	strh	r3, [r7, #6]
 8007d92:	4613      	mov	r3, r2
 8007d94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d96:	7979      	ldrb	r1, [r7, #5]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2301      	movs	r3, #1
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2302      	movs	r3, #2
 8007daa:	2201      	movs	r2, #1
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f001 f9c4 	bl	800913a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	70fb      	strb	r3, [r7, #3]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70bb      	strb	r3, [r7, #2]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007dd6:	7878      	ldrb	r0, [r7, #1]
 8007dd8:	78ba      	ldrb	r2, [r7, #2]
 8007dda:	78f9      	ldrb	r1, [r7, #3]
 8007ddc:	8b3b      	ldrh	r3, [r7, #24]
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	7d3b      	ldrb	r3, [r7, #20]
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	7c3b      	ldrb	r3, [r7, #16]
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	4603      	mov	r3, r0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f957 	bl	800909e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007df0:	2300      	movs	r3, #0

}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 f976 	bl	80090fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e10:	2300      	movs	r3, #0

}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f831 	bl	8007e8e <USBH_GetFreePipe>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	89fa      	ldrh	r2, [r7, #14]
 8007e3e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32e0      	adds	r2, #224	; 0xe0
 8007e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	b2db      	uxtb	r3, r3
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	2b0a      	cmp	r3, #10
 8007e66:	d80b      	bhi.n	8007e80 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32e0      	adds	r2, #224	; 0xe0
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32e0      	adds	r2, #224	; 0xe0
 8007e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
 8007e9e:	e00e      	b.n	8007ebe <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ea0:	7bfa      	ldrb	r2, [r7, #15]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	32e0      	adds	r2, #224	; 0xe0
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	e007      	b.n	8007ec8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	2b0a      	cmp	r3, #10
 8007ec2:	d9ed      	bls.n	8007ea0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <Slot1>:
static void MX_TIM4_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

uint32_t Slot1() {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8007ede:	2201      	movs	r2, #1
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	4813      	ldr	r0, [pc, #76]	; (8007f30 <Slot1+0x5c>)
 8007ee4:	f7f8 fe6a 	bl	8000bbc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007ee8:	200a      	movs	r0, #10
 8007eea:	f7f8 fb5f 	bl	80005ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	480f      	ldr	r0, [pc, #60]	; (8007f30 <Slot1+0x5c>)
 8007ef4:	f7f8 fe62 	bl	8000bbc <HAL_GPIO_WritePin>

	while (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)))
 8007ef8:	bf00      	nop
 8007efa:	2101      	movs	r1, #1
 8007efc:	480c      	ldr	r0, [pc, #48]	; (8007f30 <Slot1+0x5c>)
 8007efe:	f7f8 fe45 	bl	8000b8c <HAL_GPIO_ReadPin>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f8      	beq.n	8007efa <Slot1+0x26>
		;

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8007f08:	e005      	b.n	8007f16 <Slot1+0x42>
		local_time++;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	607b      	str	r3, [r7, #4]
		HAL_Delay(1);
 8007f10:	2001      	movs	r0, #1
 8007f12:	f7f8 fb4b 	bl	80005ac <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8007f16:	2101      	movs	r1, #1
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <Slot1+0x5c>)
 8007f1a:	f7f8 fe37 	bl	8000b8c <HAL_GPIO_ReadPin>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f2      	bne.n	8007f0a <Slot1+0x36>
	}

	return local_time * 2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	005b      	lsls	r3, r3, #1
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40020800 	.word	0x40020800

08007f34 <Slot2>:

uint32_t Slot2() {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8007f3e:	2201      	movs	r2, #1
 8007f40:	2108      	movs	r1, #8
 8007f42:	4813      	ldr	r0, [pc, #76]	; (8007f90 <Slot2+0x5c>)
 8007f44:	f7f8 fe3a 	bl	8000bbc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007f48:	200a      	movs	r0, #10
 8007f4a:	f7f8 fb2f 	bl	80005ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2108      	movs	r1, #8
 8007f52:	480f      	ldr	r0, [pc, #60]	; (8007f90 <Slot2+0x5c>)
 8007f54:	f7f8 fe32 	bl	8000bbc <HAL_GPIO_WritePin>

	while (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)))
 8007f58:	bf00      	nop
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	480c      	ldr	r0, [pc, #48]	; (8007f90 <Slot2+0x5c>)
 8007f5e:	f7f8 fe15 	bl	8000b8c <HAL_GPIO_ReadPin>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f8      	beq.n	8007f5a <Slot2+0x26>
		;

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8007f68:	e005      	b.n	8007f76 <Slot2+0x42>
		local_time++;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	607b      	str	r3, [r7, #4]
		HAL_Delay(1);
 8007f70:	2001      	movs	r0, #1
 8007f72:	f7f8 fb1b 	bl	80005ac <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8007f76:	2104      	movs	r1, #4
 8007f78:	4805      	ldr	r0, [pc, #20]	; (8007f90 <Slot2+0x5c>)
 8007f7a:	f7f8 fe07 	bl	8000b8c <HAL_GPIO_ReadPin>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f2      	bne.n	8007f6a <Slot2+0x36>
	}

	return local_time * 2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	005b      	lsls	r3, r3, #1
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40020800 	.word	0x40020800

08007f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f98:	f7f8 fa96 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f9c:	f000 f904 	bl	80081a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fa0:	f000 fb26 	bl	80085f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007fa4:	f000 f982 	bl	80082ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8007fa8:	f000 f9ae 	bl	8008308 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007fac:	f000 f9dc 	bl	8008368 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007fb0:	f000 fe9c 	bl	8008cec <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8007fb4:	f000 faf2 	bl	800859c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8007fb8:	f000 fa0c 	bl	80083d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007fbc:	f000 fa7c 	bl	80084b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8007fc0:	4852      	ldr	r0, [pc, #328]	; (800810c <main+0x178>)
 8007fc2:	f7fb fe5c 	bl	8003c7e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state1 = READY;
 8007fc6:	4b52      	ldr	r3, [pc, #328]	; (8008110 <main+0x17c>)
 8007fc8:	220a      	movs	r2, #10
 8007fca:	601a      	str	r2, [r3, #0]
  state2 = READY;
 8007fcc:	4b51      	ldr	r3, [pc, #324]	; (8008114 <main+0x180>)
 8007fce:	220a      	movs	r2, #10
 8007fd0:	601a      	str	r2, [r3, #0]
	while (1) {
		sensor_1_time = Slot1();
 8007fd2:	f7ff ff7f 	bl	8007ed4 <Slot1>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b4f      	ldr	r3, [pc, #316]	; (8008118 <main+0x184>)
 8007fda:	601a      	str	r2, [r3, #0]
		sensor_2_time = Slot2();
 8007fdc:	f7ff ffaa 	bl	8007f34 <Slot2>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	; (800811c <main+0x188>)
 8007fe4:	601a      	str	r2, [r3, #0]

		if (sensor_1_time <= 2)
 8007fe6:	4b4c      	ldr	r3, [pc, #304]	; (8008118 <main+0x184>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d803      	bhi.n	8007ff6 <main+0x62>
			slots[0] = '1';
 8007fee:	4b4c      	ldr	r3, [pc, #304]	; (8008120 <main+0x18c>)
 8007ff0:	2231      	movs	r2, #49	; 0x31
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e002      	b.n	8007ffc <main+0x68>
		else
			slots[0] = '0';
 8007ff6:	4b4a      	ldr	r3, [pc, #296]	; (8008120 <main+0x18c>)
 8007ff8:	2230      	movs	r2, #48	; 0x30
 8007ffa:	701a      	strb	r2, [r3, #0]
		if (sensor_2_time <= 2)
 8007ffc:	4b47      	ldr	r3, [pc, #284]	; (800811c <main+0x188>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d803      	bhi.n	800800c <main+0x78>
			slots[1] = '1';
 8008004:	4b46      	ldr	r3, [pc, #280]	; (8008120 <main+0x18c>)
 8008006:	2231      	movs	r2, #49	; 0x31
 8008008:	705a      	strb	r2, [r3, #1]
 800800a:	e002      	b.n	8008012 <main+0x7e>
		else
			slots[1] = '0';
 800800c:	4b44      	ldr	r3, [pc, #272]	; (8008120 <main+0x18c>)
 800800e:	2230      	movs	r2, #48	; 0x30
 8008010:	705a      	strb	r2, [r3, #1]

		if (state1 == IN_USE)
 8008012:	4b3f      	ldr	r3, [pc, #252]	; (8008110 <main+0x17c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b0b      	cmp	r3, #11
 8008018:	d105      	bne.n	8008026 <main+0x92>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800801a:	2200      	movs	r2, #0
 800801c:	2101      	movs	r1, #1
 800801e:	4841      	ldr	r0, [pc, #260]	; (8008124 <main+0x190>)
 8008020:	f7f8 fdcc 	bl	8000bbc <HAL_GPIO_WritePin>
 8008024:	e00d      	b.n	8008042 <main+0xae>
		else if (state1 == WAITING)
 8008026:	4b3a      	ldr	r3, [pc, #232]	; (8008110 <main+0x17c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b0c      	cmp	r3, #12
 800802c:	d104      	bne.n	8008038 <main+0xa4>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800802e:	2101      	movs	r1, #1
 8008030:	483c      	ldr	r0, [pc, #240]	; (8008124 <main+0x190>)
 8008032:	f7f8 fddc 	bl	8000bee <HAL_GPIO_TogglePin>
 8008036:	e004      	b.n	8008042 <main+0xae>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8008038:	2201      	movs	r2, #1
 800803a:	2101      	movs	r1, #1
 800803c:	4839      	ldr	r0, [pc, #228]	; (8008124 <main+0x190>)
 800803e:	f7f8 fdbd 	bl	8000bbc <HAL_GPIO_WritePin>

		if (state2 == IN_USE)
 8008042:	4b34      	ldr	r3, [pc, #208]	; (8008114 <main+0x180>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b0b      	cmp	r3, #11
 8008048:	d105      	bne.n	8008056 <main+0xc2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800804a:	2200      	movs	r2, #0
 800804c:	2102      	movs	r1, #2
 800804e:	4835      	ldr	r0, [pc, #212]	; (8008124 <main+0x190>)
 8008050:	f7f8 fdb4 	bl	8000bbc <HAL_GPIO_WritePin>
 8008054:	e00d      	b.n	8008072 <main+0xde>
		else if (state2 == WAITING)
 8008056:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <main+0x180>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b0c      	cmp	r3, #12
 800805c:	d104      	bne.n	8008068 <main+0xd4>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800805e:	2102      	movs	r1, #2
 8008060:	4830      	ldr	r0, [pc, #192]	; (8008124 <main+0x190>)
 8008062:	f7f8 fdc4 	bl	8000bee <HAL_GPIO_TogglePin>
 8008066:	e004      	b.n	8008072 <main+0xde>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8008068:	2201      	movs	r2, #1
 800806a:	2102      	movs	r1, #2
 800806c:	482d      	ldr	r0, [pc, #180]	; (8008124 <main+0x190>)
 800806e:	f7f8 fda5 	bl	8000bbc <HAL_GPIO_WritePin>

		HAL_UART_Receive_IT(&huart2, buf, 2);
 8008072:	2202      	movs	r2, #2
 8008074:	492c      	ldr	r1, [pc, #176]	; (8008128 <main+0x194>)
 8008076:	482d      	ldr	r0, [pc, #180]	; (800812c <main+0x198>)
 8008078:	f7fc fd31 	bl	8004ade <HAL_UART_Receive_IT>

		if ('1' == (char) buf[0] && state1 == READY){
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <main+0x194>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b31      	cmp	r3, #49	; 0x31
 8008082:	d10a      	bne.n	800809a <main+0x106>
 8008084:	4b22      	ldr	r3, [pc, #136]	; (8008110 <main+0x17c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b0a      	cmp	r3, #10
 800808a:	d106      	bne.n	800809a <main+0x106>
			buf[0] = '0';
 800808c:	4b26      	ldr	r3, [pc, #152]	; (8008128 <main+0x194>)
 800808e:	2230      	movs	r2, #48	; 0x30
 8008090:	701a      	strb	r2, [r3, #0]
			state1 = WAITING;
 8008092:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <main+0x17c>)
 8008094:	220c      	movs	r2, #12
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e00d      	b.n	80080b6 <main+0x122>
		}
		else if ('2' == (char) buf[0] && state1 == WAITING){
 800809a:	4b23      	ldr	r3, [pc, #140]	; (8008128 <main+0x194>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b32      	cmp	r3, #50	; 0x32
 80080a0:	d109      	bne.n	80080b6 <main+0x122>
 80080a2:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <main+0x17c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b0c      	cmp	r3, #12
 80080a8:	d105      	bne.n	80080b6 <main+0x122>
			buf[0] = '0';
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <main+0x194>)
 80080ac:	2230      	movs	r2, #48	; 0x30
 80080ae:	701a      	strb	r2, [r3, #0]
			state1 = READY;
 80080b0:	4b17      	ldr	r3, [pc, #92]	; (8008110 <main+0x17c>)
 80080b2:	220a      	movs	r2, #10
 80080b4:	601a      	str	r2, [r3, #0]
		}

		if ('1' == (char) buf[1] && state2 == READY){
 80080b6:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <main+0x194>)
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	2b31      	cmp	r3, #49	; 0x31
 80080bc:	d10a      	bne.n	80080d4 <main+0x140>
 80080be:	4b15      	ldr	r3, [pc, #84]	; (8008114 <main+0x180>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b0a      	cmp	r3, #10
 80080c4:	d106      	bne.n	80080d4 <main+0x140>
			buf[1] = '0';
 80080c6:	4b18      	ldr	r3, [pc, #96]	; (8008128 <main+0x194>)
 80080c8:	2230      	movs	r2, #48	; 0x30
 80080ca:	705a      	strb	r2, [r3, #1]
			state2 = WAITING;
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <main+0x180>)
 80080ce:	220c      	movs	r2, #12
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e00d      	b.n	80080f0 <main+0x15c>
		}
		else if ('2' == (char) buf[1] && state2 == WAITING){
 80080d4:	4b14      	ldr	r3, [pc, #80]	; (8008128 <main+0x194>)
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b32      	cmp	r3, #50	; 0x32
 80080da:	d109      	bne.n	80080f0 <main+0x15c>
 80080dc:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <main+0x180>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b0c      	cmp	r3, #12
 80080e2:	d105      	bne.n	80080f0 <main+0x15c>
			buf[1] = '0';
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <main+0x194>)
 80080e6:	2230      	movs	r2, #48	; 0x30
 80080e8:	705a      	strb	r2, [r3, #1]
			state2 = READY;
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <main+0x180>)
 80080ec:	220a      	movs	r2, #10
 80080ee:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart2, slots, 2, 900);
 80080f0:	f44f 7361 	mov.w	r3, #900	; 0x384
 80080f4:	2202      	movs	r2, #2
 80080f6:	490a      	ldr	r1, [pc, #40]	; (8008120 <main+0x18c>)
 80080f8:	480c      	ldr	r0, [pc, #48]	; (800812c <main+0x198>)
 80080fa:	f7fc fc57 	bl	80049ac <HAL_UART_Transmit>

		HAL_Delay(10);
 80080fe:	200a      	movs	r0, #10
 8008100:	f7f8 fa54 	bl	80005ac <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008104:	f000 fe18 	bl	8008d38 <MX_USB_HOST_Process>
		sensor_1_time = Slot1();
 8008108:	e763      	b.n	8007fd2 <main+0x3e>
 800810a:	bf00      	nop
 800810c:	20000168 	.word	0x20000168
 8008110:	200001a8 	.word	0x200001a8
 8008114:	20000244 	.word	0x20000244
 8008118:	2000010c 	.word	0x2000010c
 800811c:	20000110 	.word	0x20000110
 8008120:	20000028 	.word	0x20000028
 8008124:	40020000 	.word	0x40020000
 8008128:	2000002c 	.word	0x2000002c
 800812c:	20000204 	.word	0x20000204

08008130 <HAL_TIM_PeriodElapsedCallback>:

    /* USER CODE BEGIN 3 */
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	if (state1 == WAITING && slots[0] == '1')
 8008138:	4b18      	ldr	r3, [pc, #96]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b0c      	cmp	r3, #12
 800813e:	d106      	bne.n	800814e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8008140:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b31      	cmp	r3, #49	; 0x31
 8008146:	d102      	bne.n	800814e <HAL_TIM_PeriodElapsedCallback+0x1e>
		state1 = IN_USE;
 8008148:	4b14      	ldr	r3, [pc, #80]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800814a:	220b      	movs	r2, #11
 800814c:	601a      	str	r2, [r3, #0]
	if (state2 == WAITING && slots[1] == '1')
 800814e:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b0c      	cmp	r3, #12
 8008154:	d106      	bne.n	8008164 <HAL_TIM_PeriodElapsedCallback+0x34>
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b31      	cmp	r3, #49	; 0x31
 800815c:	d102      	bne.n	8008164 <HAL_TIM_PeriodElapsedCallback+0x34>
		state2 = IN_USE;
 800815e:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8008160:	220b      	movs	r2, #11
 8008162:	601a      	str	r2, [r3, #0]

	if (state1 == IN_USE && slots[0] == '0')
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b0b      	cmp	r3, #11
 800816a:	d106      	bne.n	800817a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b30      	cmp	r3, #48	; 0x30
 8008172:	d102      	bne.n	800817a <HAL_TIM_PeriodElapsedCallback+0x4a>
		state1 = READY;
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8008176:	220a      	movs	r2, #10
 8008178:	601a      	str	r2, [r3, #0]
	if (state2 == IN_USE && slots[1] == '0')
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b0b      	cmp	r3, #11
 8008180:	d106      	bne.n	8008190 <HAL_TIM_PeriodElapsedCallback+0x60>
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b30      	cmp	r3, #48	; 0x30
 8008188:	d102      	bne.n	8008190 <HAL_TIM_PeriodElapsedCallback+0x60>
		state2 = READY;
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800818c:	220a      	movs	r2, #10
 800818e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 3 */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	200001a8 	.word	0x200001a8
 80081a0:	20000028 	.word	0x20000028
 80081a4:	20000244 	.word	0x20000244

080081a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b098      	sub	sp, #96	; 0x60
 80081ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081b2:	2230      	movs	r2, #48	; 0x30
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 f8e0 	bl	800937c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081bc:	f107 031c 	add.w	r3, r7, #28
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	609a      	str	r2, [r3, #8]
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80081da:	2300      	movs	r3, #0
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <SystemClock_Config+0xfc>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	4a30      	ldr	r2, [pc, #192]	; (80082a4 <SystemClock_Config+0xfc>)
 80081e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e8:	6413      	str	r3, [r2, #64]	; 0x40
 80081ea:	4b2e      	ldr	r3, [pc, #184]	; (80082a4 <SystemClock_Config+0xfc>)
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f2:	60bb      	str	r3, [r7, #8]
 80081f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80081f6:	2300      	movs	r3, #0
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <SystemClock_Config+0x100>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <SystemClock_Config+0x100>)
 8008200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4b28      	ldr	r3, [pc, #160]	; (80082a8 <SystemClock_Config+0x100>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800820e:	607b      	str	r3, [r7, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008212:	2301      	movs	r3, #1
 8008214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800821c:	2302      	movs	r3, #2
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008224:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008226:	2308      	movs	r3, #8
 8008228:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800822a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800822e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008230:	2302      	movs	r3, #2
 8008232:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008234:	2307      	movs	r3, #7
 8008236:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800823c:	4618      	mov	r0, r3
 800823e:	f7fa ff21 	bl	8003084 <HAL_RCC_OscConfig>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8008248:	f000 fac4 	bl	80087d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800824c:	230f      	movs	r3, #15
 800824e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008250:	2302      	movs	r3, #2
 8008252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008254:	2300      	movs	r3, #0
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800825c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800825e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008264:	f107 031c 	add.w	r3, r7, #28
 8008268:	2105      	movs	r1, #5
 800826a:	4618      	mov	r0, r3
 800826c:	f7fb f94c 	bl	8003508 <HAL_RCC_ClockConfig>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8008276:	f000 faad 	bl	80087d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800827a:	2301      	movs	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800827e:	23c0      	movs	r3, #192	; 0xc0
 8008280:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008282:	2302      	movs	r3, #2
 8008284:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008286:	f107 030c 	add.w	r3, r7, #12
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb fb2a 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008296:	f000 fa9d 	bl	80087d4 <Error_Handler>
  }
}
 800829a:	bf00      	nop
 800829c:	3760      	adds	r7, #96	; 0x60
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40023800 	.word	0x40023800
 80082a8:	40007000 	.word	0x40007000

080082ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80082b0:	4b12      	ldr	r3, [pc, #72]	; (80082fc <MX_I2C1_Init+0x50>)
 80082b2:	4a13      	ldr	r2, [pc, #76]	; (8008300 <MX_I2C1_Init+0x54>)
 80082b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <MX_I2C1_Init+0x50>)
 80082b8:	4a12      	ldr	r2, [pc, #72]	; (8008304 <MX_I2C1_Init+0x58>)
 80082ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <MX_I2C1_Init+0x50>)
 80082be:	2200      	movs	r2, #0
 80082c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <MX_I2C1_Init+0x50>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <MX_I2C1_Init+0x50>)
 80082ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80082d0:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <MX_I2C1_Init+0x50>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <MX_I2C1_Init+0x50>)
 80082d8:	2200      	movs	r2, #0
 80082da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <MX_I2C1_Init+0x50>)
 80082de:	2200      	movs	r2, #0
 80082e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <MX_I2C1_Init+0x50>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80082e8:	4804      	ldr	r0, [pc, #16]	; (80082fc <MX_I2C1_Init+0x50>)
 80082ea:	f7fa f903 	bl	80024f4 <HAL_I2C_Init>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80082f4:	f000 fa6e 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000114 	.word	0x20000114
 8008300:	40005400 	.word	0x40005400
 8008304:	000186a0 	.word	0x000186a0

08008308 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800830c:	4b13      	ldr	r3, [pc, #76]	; (800835c <MX_I2S3_Init+0x54>)
 800830e:	4a14      	ldr	r2, [pc, #80]	; (8008360 <MX_I2S3_Init+0x58>)
 8008310:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <MX_I2S3_Init+0x54>)
 8008314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008318:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800831a:	4b10      	ldr	r3, [pc, #64]	; (800835c <MX_I2S3_Init+0x54>)
 800831c:	2200      	movs	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008320:	4b0e      	ldr	r3, [pc, #56]	; (800835c <MX_I2S3_Init+0x54>)
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <MX_I2S3_Init+0x54>)
 8008328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <MX_I2S3_Init+0x54>)
 8008330:	4a0c      	ldr	r2, [pc, #48]	; (8008364 <MX_I2S3_Init+0x5c>)
 8008332:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <MX_I2S3_Init+0x54>)
 8008336:	2200      	movs	r2, #0
 8008338:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <MX_I2S3_Init+0x54>)
 800833c:	2200      	movs	r2, #0
 800833e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008340:	4b06      	ldr	r3, [pc, #24]	; (800835c <MX_I2S3_Init+0x54>)
 8008342:	2200      	movs	r2, #0
 8008344:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008346:	4805      	ldr	r0, [pc, #20]	; (800835c <MX_I2S3_Init+0x54>)
 8008348:	f7fa f9fc 	bl	8002744 <HAL_I2S_Init>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008352:	f000 fa3f 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008356:	bf00      	nop
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000248 	.word	0x20000248
 8008360:	40003c00 	.word	0x40003c00
 8008364:	00017700 	.word	0x00017700

08008368 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <MX_SPI1_Init+0x64>)
 800836e:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <MX_SPI1_Init+0x68>)
 8008370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008372:	4b16      	ldr	r3, [pc, #88]	; (80083cc <MX_SPI1_Init+0x64>)
 8008374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <MX_SPI1_Init+0x64>)
 800837c:	2200      	movs	r2, #0
 800837e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <MX_SPI1_Init+0x64>)
 8008382:	2200      	movs	r2, #0
 8008384:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <MX_SPI1_Init+0x64>)
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <MX_SPI1_Init+0x64>)
 800838e:	2200      	movs	r2, #0
 8008390:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <MX_SPI1_Init+0x64>)
 8008394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008398:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <MX_SPI1_Init+0x64>)
 800839c:	2200      	movs	r2, #0
 800839e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <MX_SPI1_Init+0x64>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <MX_SPI1_Init+0x64>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <MX_SPI1_Init+0x64>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80083b2:	4b06      	ldr	r3, [pc, #24]	; (80083cc <MX_SPI1_Init+0x64>)
 80083b4:	220a      	movs	r2, #10
 80083b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80083b8:	4804      	ldr	r0, [pc, #16]	; (80083cc <MX_SPI1_Init+0x64>)
 80083ba:	f7fb fbd1 	bl	8003b60 <HAL_SPI_Init>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80083c4:	f000 fa06 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80083c8:	bf00      	nop
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	200001ac 	.word	0x200001ac
 80083d0:	40013000 	.word	0x40013000

080083d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	605a      	str	r2, [r3, #4]
 80083e4:	609a      	str	r2, [r3, #8]
 80083e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083e8:	f107 0320 	add.w	r3, r7, #32
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	605a      	str	r2, [r3, #4]
 80083fa:	609a      	str	r2, [r3, #8]
 80083fc:	60da      	str	r2, [r3, #12]
 80083fe:	611a      	str	r2, [r3, #16]
 8008400:	615a      	str	r2, [r3, #20]
 8008402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008404:	4b2a      	ldr	r3, [pc, #168]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008406:	4a2b      	ldr	r2, [pc, #172]	; (80084b4 <MX_TIM3_Init+0xe0>)
 8008408:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800840a:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <MX_TIM3_Init+0xdc>)
 800840c:	2254      	movs	r2, #84	; 0x54
 800840e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008410:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008418:	2263      	movs	r2, #99	; 0x63
 800841a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800841c:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <MX_TIM3_Init+0xdc>)
 800841e:	2200      	movs	r2, #0
 8008420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008422:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008428:	4821      	ldr	r0, [pc, #132]	; (80084b0 <MX_TIM3_Init+0xdc>)
 800842a:	f7fb fbfd 	bl	8003c28 <HAL_TIM_Base_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8008434:	f000 f9ce 	bl	80087d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800843e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008442:	4619      	mov	r1, r3
 8008444:	481a      	ldr	r0, [pc, #104]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008446:	f7fb fe41 	bl	80040cc <HAL_TIM_ConfigClockSource>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8008450:	f000 f9c0 	bl	80087d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008454:	4816      	ldr	r0, [pc, #88]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008456:	f7fb fc36 	bl	8003cc6 <HAL_TIM_PWM_Init>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8008460:	f000 f9b8 	bl	80087d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008464:	2300      	movs	r3, #0
 8008466:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008468:	2300      	movs	r3, #0
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800846c:	f107 0320 	add.w	r3, r7, #32
 8008470:	4619      	mov	r1, r3
 8008472:	480f      	ldr	r0, [pc, #60]	; (80084b0 <MX_TIM3_Init+0xdc>)
 8008474:	f7fc f9f4 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800847e:	f000 f9a9 	bl	80087d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008482:	2360      	movs	r3, #96	; 0x60
 8008484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008492:	1d3b      	adds	r3, r7, #4
 8008494:	220c      	movs	r2, #12
 8008496:	4619      	mov	r1, r3
 8008498:	4805      	ldr	r0, [pc, #20]	; (80084b0 <MX_TIM3_Init+0xdc>)
 800849a:	f7fb fd51 	bl	8003f40 <HAL_TIM_PWM_ConfigChannel>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80084a4:	f000 f996 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80084a8:	bf00      	nop
 80084aa:	3738      	adds	r7, #56	; 0x38
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000168 	.word	0x20000168
 80084b4:	40000400 	.word	0x40000400

080084b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	605a      	str	r2, [r3, #4]
 80084c8:	609a      	str	r2, [r3, #8]
 80084ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084cc:	f107 0320 	add.w	r3, r7, #32
 80084d0:	2200      	movs	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80084d6:	1d3b      	adds	r3, r7, #4
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	611a      	str	r2, [r3, #16]
 80084e4:	615a      	str	r2, [r3, #20]
 80084e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80084e8:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <MX_TIM4_Init+0xdc>)
 80084ea:	4a2b      	ldr	r2, [pc, #172]	; (8008598 <MX_TIM4_Init+0xe0>)
 80084ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80084ee:	4b29      	ldr	r3, [pc, #164]	; (8008594 <MX_TIM4_Init+0xdc>)
 80084f0:	2254      	movs	r2, #84	; 0x54
 80084f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084f4:	4b27      	ldr	r3, [pc, #156]	; (8008594 <MX_TIM4_Init+0xdc>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80084fa:	4b26      	ldr	r3, [pc, #152]	; (8008594 <MX_TIM4_Init+0xdc>)
 80084fc:	2263      	movs	r2, #99	; 0x63
 80084fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008500:	4b24      	ldr	r3, [pc, #144]	; (8008594 <MX_TIM4_Init+0xdc>)
 8008502:	2200      	movs	r2, #0
 8008504:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008506:	4b23      	ldr	r3, [pc, #140]	; (8008594 <MX_TIM4_Init+0xdc>)
 8008508:	2280      	movs	r2, #128	; 0x80
 800850a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800850c:	4821      	ldr	r0, [pc, #132]	; (8008594 <MX_TIM4_Init+0xdc>)
 800850e:	f7fb fb8b 	bl	8003c28 <HAL_TIM_Base_Init>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8008518:	f000 f95c 	bl	80087d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800851c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008526:	4619      	mov	r1, r3
 8008528:	481a      	ldr	r0, [pc, #104]	; (8008594 <MX_TIM4_Init+0xdc>)
 800852a:	f7fb fdcf 	bl	80040cc <HAL_TIM_ConfigClockSource>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8008534:	f000 f94e 	bl	80087d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008538:	4816      	ldr	r0, [pc, #88]	; (8008594 <MX_TIM4_Init+0xdc>)
 800853a:	f7fb fbc4 	bl	8003cc6 <HAL_TIM_PWM_Init>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8008544:	f000 f946 	bl	80087d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800854c:	2300      	movs	r3, #0
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008550:	f107 0320 	add.w	r3, r7, #32
 8008554:	4619      	mov	r1, r3
 8008556:	480f      	ldr	r0, [pc, #60]	; (8008594 <MX_TIM4_Init+0xdc>)
 8008558:	f7fc f982 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8008562:	f000 f937 	bl	80087d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008566:	2360      	movs	r3, #96	; 0x60
 8008568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	2200      	movs	r2, #0
 800857a:	4619      	mov	r1, r3
 800857c:	4805      	ldr	r0, [pc, #20]	; (8008594 <MX_TIM4_Init+0xdc>)
 800857e:	f7fb fcdf 	bl	8003f40 <HAL_TIM_PWM_ConfigChannel>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8008588:	f000 f924 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800858c:	bf00      	nop
 800858e:	3738      	adds	r7, #56	; 0x38
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	200000cc 	.word	0x200000cc
 8008598:	40000800 	.word	0x40000800

0800859c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085a2:	4a12      	ldr	r2, [pc, #72]	; (80085ec <MX_USART2_UART_Init+0x50>)
 80085a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085ae:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085ba:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085bc:	2200      	movs	r2, #0
 80085be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085c0:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085c2:	220c      	movs	r2, #12
 80085c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085d2:	4805      	ldr	r0, [pc, #20]	; (80085e8 <MX_USART2_UART_Init+0x4c>)
 80085d4:	f7fc f99d 	bl	8004912 <HAL_UART_Init>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80085de:	f000 f8f9 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000204 	.word	0x20000204
 80085ec:	40004400 	.word	0x40004400

080085f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08c      	sub	sp, #48	; 0x30
 80085f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f6:	f107 031c 	add.w	r3, r7, #28
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	605a      	str	r2, [r3, #4]
 8008600:	609a      	str	r2, [r3, #8]
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008606:	2300      	movs	r3, #0
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	4b6c      	ldr	r3, [pc, #432]	; (80087bc <MX_GPIO_Init+0x1cc>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	4a6b      	ldr	r2, [pc, #428]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008610:	f043 0310 	orr.w	r3, r3, #16
 8008614:	6313      	str	r3, [r2, #48]	; 0x30
 8008616:	4b69      	ldr	r3, [pc, #420]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008622:	2300      	movs	r3, #0
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	4b65      	ldr	r3, [pc, #404]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	4a64      	ldr	r2, [pc, #400]	; (80087bc <MX_GPIO_Init+0x1cc>)
 800862c:	f043 0304 	orr.w	r3, r3, #4
 8008630:	6313      	str	r3, [r2, #48]	; 0x30
 8008632:	4b62      	ldr	r3, [pc, #392]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	4b5e      	ldr	r3, [pc, #376]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	4a5d      	ldr	r2, [pc, #372]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	6313      	str	r3, [r2, #48]	; 0x30
 800864e:	4b5b      	ldr	r3, [pc, #364]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	4b57      	ldr	r3, [pc, #348]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	4a56      	ldr	r2, [pc, #344]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	6313      	str	r3, [r2, #48]	; 0x30
 800866a:	4b54      	ldr	r3, [pc, #336]	; (80087bc <MX_GPIO_Init+0x1cc>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	4b50      	ldr	r3, [pc, #320]	; (80087bc <MX_GPIO_Init+0x1cc>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	4a4f      	ldr	r2, [pc, #316]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008680:	f043 0302 	orr.w	r3, r3, #2
 8008684:	6313      	str	r3, [r2, #48]	; 0x30
 8008686:	4b4d      	ldr	r3, [pc, #308]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	4b49      	ldr	r3, [pc, #292]	; (80087bc <MX_GPIO_Init+0x1cc>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	4a48      	ldr	r2, [pc, #288]	; (80087bc <MX_GPIO_Init+0x1cc>)
 800869c:	f043 0308 	orr.w	r3, r3, #8
 80086a0:	6313      	str	r3, [r2, #48]	; 0x30
 80086a2:	4b46      	ldr	r3, [pc, #280]	; (80087bc <MX_GPIO_Init+0x1cc>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	607b      	str	r3, [r7, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2108      	movs	r1, #8
 80086b2:	4843      	ldr	r0, [pc, #268]	; (80087c0 <MX_GPIO_Init+0x1d0>)
 80086b4:	f7f8 fa82 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80086b8:	2200      	movs	r2, #0
 80086ba:	210a      	movs	r1, #10
 80086bc:	4841      	ldr	r0, [pc, #260]	; (80087c4 <MX_GPIO_Init+0x1d4>)
 80086be:	f7f8 fa7d 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80086c2:	2200      	movs	r2, #0
 80086c4:	2103      	movs	r1, #3
 80086c6:	4840      	ldr	r0, [pc, #256]	; (80087c8 <MX_GPIO_Init+0x1d8>)
 80086c8:	f7f8 fa78 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80086cc:	2200      	movs	r2, #0
 80086ce:	f24f 0110 	movw	r1, #61456	; 0xf010
 80086d2:	483e      	ldr	r0, [pc, #248]	; (80087cc <MX_GPIO_Init+0x1dc>)
 80086d4:	f7f8 fa72 	bl	8000bbc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80086d8:	2308      	movs	r3, #8
 80086da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086dc:	2301      	movs	r3, #1
 80086de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086e4:	2300      	movs	r3, #0
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80086e8:	f107 031c 	add.w	r3, r7, #28
 80086ec:	4619      	mov	r1, r3
 80086ee:	4834      	ldr	r0, [pc, #208]	; (80087c0 <MX_GPIO_Init+0x1d0>)
 80086f0:	f7f8 f8b2 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80086f4:	2305      	movs	r3, #5
 80086f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086f8:	2300      	movs	r3, #0
 80086fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008700:	f107 031c 	add.w	r3, r7, #28
 8008704:	4619      	mov	r1, r3
 8008706:	482f      	ldr	r0, [pc, #188]	; (80087c4 <MX_GPIO_Init+0x1d4>)
 8008708:	f7f8 f8a6 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800870c:	230a      	movs	r3, #10
 800870e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008710:	2301      	movs	r3, #1
 8008712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008718:	2300      	movs	r3, #0
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800871c:	f107 031c 	add.w	r3, r7, #28
 8008720:	4619      	mov	r1, r3
 8008722:	4828      	ldr	r0, [pc, #160]	; (80087c4 <MX_GPIO_Init+0x1d4>)
 8008724:	f7f8 f898 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008728:	2303      	movs	r3, #3
 800872a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800872c:	2301      	movs	r3, #1
 800872e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008730:	2300      	movs	r3, #0
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008734:	2300      	movs	r3, #0
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008738:	f107 031c 	add.w	r3, r7, #28
 800873c:	4619      	mov	r1, r3
 800873e:	4822      	ldr	r0, [pc, #136]	; (80087c8 <MX_GPIO_Init+0x1d8>)
 8008740:	f7f8 f88a 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008744:	2304      	movs	r3, #4
 8008746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008748:	2300      	movs	r3, #0
 800874a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874c:	2300      	movs	r3, #0
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008750:	f107 031c 	add.w	r3, r7, #28
 8008754:	4619      	mov	r1, r3
 8008756:	481e      	ldr	r0, [pc, #120]	; (80087d0 <MX_GPIO_Init+0x1e0>)
 8008758:	f7f8 f87e 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800875c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008762:	2302      	movs	r3, #2
 8008764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008766:	2300      	movs	r3, #0
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800876a:	2300      	movs	r3, #0
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800876e:	2305      	movs	r3, #5
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008772:	f107 031c 	add.w	r3, r7, #28
 8008776:	4619      	mov	r1, r3
 8008778:	4815      	ldr	r0, [pc, #84]	; (80087d0 <MX_GPIO_Init+0x1e0>)
 800877a:	f7f8 f86d 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800877e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008782:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008784:	2301      	movs	r3, #1
 8008786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2300      	movs	r3, #0
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878c:	2300      	movs	r3, #0
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008790:	f107 031c 	add.w	r3, r7, #28
 8008794:	4619      	mov	r1, r3
 8008796:	480d      	ldr	r0, [pc, #52]	; (80087cc <MX_GPIO_Init+0x1dc>)
 8008798:	f7f8 f85e 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800879c:	2320      	movs	r3, #32
 800879e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087a0:	2300      	movs	r3, #0
 80087a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80087a8:	f107 031c 	add.w	r3, r7, #28
 80087ac:	4619      	mov	r1, r3
 80087ae:	4807      	ldr	r0, [pc, #28]	; (80087cc <MX_GPIO_Init+0x1dc>)
 80087b0:	f7f8 f852 	bl	8000858 <HAL_GPIO_Init>

}
 80087b4:	bf00      	nop
 80087b6:	3730      	adds	r7, #48	; 0x30
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40023800 	.word	0x40023800
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40020800 	.word	0x40020800
 80087c8:	40020000 	.word	0x40020000
 80087cc:	40020c00 	.word	0x40020c00
 80087d0:	40020400 	.word	0x40020400

080087d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80087d8:	bf00      	nop
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
	...

080087e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ea:	2300      	movs	r3, #0
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <HAL_MspInit+0x4c>)
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	4a0f      	ldr	r2, [pc, #60]	; (8008830 <HAL_MspInit+0x4c>)
 80087f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087f8:	6453      	str	r3, [r2, #68]	; 0x44
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <HAL_MspInit+0x4c>)
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008802:	607b      	str	r3, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008806:	2300      	movs	r3, #0
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <HAL_MspInit+0x4c>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	4a08      	ldr	r2, [pc, #32]	; (8008830 <HAL_MspInit+0x4c>)
 8008810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008814:	6413      	str	r3, [r2, #64]	; 0x40
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <HAL_MspInit+0x4c>)
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8008822:	2005      	movs	r0, #5
 8008824:	f7f7 ffb4 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40023800 	.word	0x40023800

08008834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800883c:	f107 0314 	add.w	r3, r7, #20
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a19      	ldr	r2, [pc, #100]	; (80088b8 <HAL_I2C_MspInit+0x84>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d12c      	bne.n	80088b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	4b18      	ldr	r3, [pc, #96]	; (80088bc <HAL_I2C_MspInit+0x88>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	4a17      	ldr	r2, [pc, #92]	; (80088bc <HAL_I2C_MspInit+0x88>)
 8008860:	f043 0302 	orr.w	r3, r3, #2
 8008864:	6313      	str	r3, [r2, #48]	; 0x30
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <HAL_I2C_MspInit+0x88>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008872:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008878:	2312      	movs	r3, #18
 800887a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800887c:	2301      	movs	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008880:	2300      	movs	r3, #0
 8008882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008884:	2304      	movs	r3, #4
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4619      	mov	r1, r3
 800888e:	480c      	ldr	r0, [pc, #48]	; (80088c0 <HAL_I2C_MspInit+0x8c>)
 8008890:	f7f7 ffe2 	bl	8000858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	4b08      	ldr	r3, [pc, #32]	; (80088bc <HAL_I2C_MspInit+0x88>)
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	4a07      	ldr	r2, [pc, #28]	; (80088bc <HAL_I2C_MspInit+0x88>)
 800889e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a2:	6413      	str	r3, [r2, #64]	; 0x40
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <HAL_I2C_MspInit+0x88>)
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80088b0:	bf00      	nop
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	40005400 	.word	0x40005400
 80088bc:	40023800 	.word	0x40023800
 80088c0:	40020400 	.word	0x40020400

080088c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088cc:	f107 0314 	add.w	r3, r7, #20
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	609a      	str	r2, [r3, #8]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a28      	ldr	r2, [pc, #160]	; (8008984 <HAL_I2S_MspInit+0xc0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d14a      	bne.n	800897c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80088e6:	2300      	movs	r3, #0
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	4b27      	ldr	r3, [pc, #156]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	4a26      	ldr	r2, [pc, #152]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 80088f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f4:	6413      	str	r3, [r2, #64]	; 0x40
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	4b20      	ldr	r3, [pc, #128]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	4a1f      	ldr	r2, [pc, #124]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	6313      	str	r3, [r2, #48]	; 0x30
 8008912:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800891e:	2300      	movs	r3, #0
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	4b19      	ldr	r3, [pc, #100]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 8008928:	f043 0304 	orr.w	r3, r3, #4
 800892c:	6313      	str	r3, [r2, #48]	; 0x30
 800892e:	4b16      	ldr	r3, [pc, #88]	; (8008988 <HAL_I2S_MspInit+0xc4>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800893a:	2310      	movs	r3, #16
 800893c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893e:	2302      	movs	r3, #2
 8008940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008946:	2300      	movs	r3, #0
 8008948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800894a:	2306      	movs	r3, #6
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800894e:	f107 0314 	add.w	r3, r7, #20
 8008952:	4619      	mov	r1, r3
 8008954:	480d      	ldr	r0, [pc, #52]	; (800898c <HAL_I2S_MspInit+0xc8>)
 8008956:	f7f7 ff7f 	bl	8000858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800895a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800895e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008960:	2302      	movs	r3, #2
 8008962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008968:	2300      	movs	r3, #0
 800896a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800896c:	2306      	movs	r3, #6
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	4619      	mov	r1, r3
 8008976:	4806      	ldr	r0, [pc, #24]	; (8008990 <HAL_I2S_MspInit+0xcc>)
 8008978:	f7f7 ff6e 	bl	8000858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800897c:	bf00      	nop
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40003c00 	.word	0x40003c00
 8008988:	40023800 	.word	0x40023800
 800898c:	40020000 	.word	0x40020000
 8008990:	40020800 	.word	0x40020800

08008994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <HAL_SPI_MspInit+0x84>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d12b      	bne.n	8008a0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089c4:	6453      	str	r3, [r2, #68]	; 0x44
 80089c6:	4b15      	ldr	r3, [pc, #84]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	4a10      	ldr	r2, [pc, #64]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	6313      	str	r3, [r2, #48]	; 0x30
 80089e2:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <HAL_SPI_MspInit+0x88>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80089ee:	23e0      	movs	r3, #224	; 0xe0
 80089f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f2:	2302      	movs	r3, #2
 80089f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089fa:	2300      	movs	r3, #0
 80089fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80089fe:	2305      	movs	r3, #5
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	4619      	mov	r1, r3
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <HAL_SPI_MspInit+0x8c>)
 8008a0a:	f7f7 ff25 	bl	8000858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008a0e:	bf00      	nop
 8008a10:	3728      	adds	r7, #40	; 0x28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40013000 	.word	0x40013000
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40020000 	.word	0x40020000

08008a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	; 0x28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	609a      	str	r2, [r3, #8]
 8008a38:	60da      	str	r2, [r3, #12]
 8008a3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a27      	ldr	r2, [pc, #156]	; (8008ae0 <HAL_TIM_Base_MspInit+0xbc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d135      	bne.n	8008ab2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	4a25      	ldr	r2, [pc, #148]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a50:	f043 0302 	orr.w	r3, r3, #2
 8008a54:	6413      	str	r3, [r2, #64]	; 0x40
 8008a56:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	4b1f      	ldr	r3, [pc, #124]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a6c:	f043 0304 	orr.w	r3, r3, #4
 8008a70:	6313      	str	r3, [r2, #48]	; 0x30
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a84:	2302      	movs	r3, #2
 8008a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a90:	2302      	movs	r3, #2
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a94:	f107 0314 	add.w	r3, r7, #20
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4813      	ldr	r0, [pc, #76]	; (8008ae8 <HAL_TIM_Base_MspInit+0xc4>)
 8008a9c:	f7f7 fedc 	bl	8000858 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	201d      	movs	r0, #29
 8008aa6:	f7f7 fe7e 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008aaa:	201d      	movs	r0, #29
 8008aac:	f7f7 fe97 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008ab0:	e012      	b.n	8008ad8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a0d      	ldr	r2, [pc, #52]	; (8008aec <HAL_TIM_Base_MspInit+0xc8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d10d      	bne.n	8008ad8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008abc:	2300      	movs	r3, #0
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008ac6:	f043 0304 	orr.w	r3, r3, #4
 8008aca:	6413      	str	r3, [r2, #64]	; 0x40
 8008acc:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_TIM_Base_MspInit+0xc0>)
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	3728      	adds	r7, #40	; 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40000400 	.word	0x40000400
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	40020800 	.word	0x40020800
 8008aec:	40000800 	.word	0x40000800

08008af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <HAL_UART_MspInit+0x94>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d133      	bne.n	8008b7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b20:	6413      	str	r3, [r2, #64]	; 0x40
 8008b22:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	4a14      	ldr	r2, [pc, #80]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b38:	f043 0301 	orr.w	r3, r3, #1
 8008b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b3e:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <HAL_UART_MspInit+0x98>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b52:	2301      	movs	r3, #1
 8008b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b56:	2303      	movs	r3, #3
 8008b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b5a:	2307      	movs	r3, #7
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b5e:	f107 0314 	add.w	r3, r7, #20
 8008b62:	4619      	mov	r1, r3
 8008b64:	4809      	ldr	r0, [pc, #36]	; (8008b8c <HAL_UART_MspInit+0x9c>)
 8008b66:	f7f7 fe77 	bl	8000858 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	2026      	movs	r0, #38	; 0x26
 8008b70:	f7f7 fe19 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008b74:	2026      	movs	r0, #38	; 0x26
 8008b76:	f7f7 fe32 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008b7a:	bf00      	nop
 8008b7c:	3728      	adds	r7, #40	; 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40004400 	.word	0x40004400
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	40020000 	.word	0x40020000

08008b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ba2:	e7fe      	b.n	8008ba2 <HardFault_Handler+0x4>

08008ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ba8:	e7fe      	b.n	8008ba8 <MemManage_Handler+0x4>

08008baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008baa:	b480      	push	{r7}
 8008bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bae:	e7fe      	b.n	8008bae <BusFault_Handler+0x4>

08008bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bb4:	e7fe      	b.n	8008bb4 <UsageFault_Handler+0x4>

08008bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bba:	bf00      	nop
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bc8:	bf00      	nop
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bd6:	bf00      	nop
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008be4:	f7f7 fcc2 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008be8:	bf00      	nop
 8008bea:	bd80      	pop	{r7, pc}

08008bec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008bf0:	4802      	ldr	r0, [pc, #8]	; (8008bfc <TIM3_IRQHandler+0x10>)
 8008bf2:	f7fb f89d 	bl	8003d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000168 	.word	0x20000168

08008c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008c04:	4802      	ldr	r0, [pc, #8]	; (8008c10 <USART2_IRQHandler+0x10>)
 8008c06:	f7fb ffbf 	bl	8004b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000204 	.word	0x20000204

08008c14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008c18:	4802      	ldr	r0, [pc, #8]	; (8008c24 <OTG_FS_IRQHandler+0x10>)
 8008c1a:	f7f8 fa89 	bl	8001130 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	2000065c 	.word	0x2000065c

08008c28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008c30:	4b11      	ldr	r3, [pc, #68]	; (8008c78 <_sbrk+0x50>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <_sbrk+0x16>
		heap_end = &end;
 8008c38:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <_sbrk+0x50>)
 8008c3a:	4a10      	ldr	r2, [pc, #64]	; (8008c7c <_sbrk+0x54>)
 8008c3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <_sbrk+0x50>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008c44:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <_sbrk+0x50>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	466a      	mov	r2, sp
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d907      	bls.n	8008c62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008c52:	f000 fb59 	bl	8009308 <__errno>
 8008c56:	4602      	mov	r2, r0
 8008c58:	230c      	movs	r3, #12
 8008c5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c60:	e006      	b.n	8008c70 <_sbrk+0x48>
	}

	heap_end += incr;
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <_sbrk+0x50>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	4a03      	ldr	r2, [pc, #12]	; (8008c78 <_sbrk+0x50>)
 8008c6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200000b8 	.word	0x200000b8
 8008c7c:	20000928 	.word	0x20000928

08008c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c84:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <SystemInit+0x60>)
 8008c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <SystemInit+0x60>)
 8008c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <SystemInit+0x64>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a12      	ldr	r2, [pc, #72]	; (8008ce4 <SystemInit+0x64>)
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ca0:	4b10      	ldr	r3, [pc, #64]	; (8008ce4 <SystemInit+0x64>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <SystemInit+0x64>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a0e      	ldr	r2, [pc, #56]	; (8008ce4 <SystemInit+0x64>)
 8008cac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008cb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <SystemInit+0x64>)
 8008cb8:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <SystemInit+0x68>)
 8008cba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <SystemInit+0x64>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <SystemInit+0x64>)
 8008cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008cc8:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <SystemInit+0x64>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <SystemInit+0x60>)
 8008cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008cd4:	609a      	str	r2, [r3, #8]
#endif
}
 8008cd6:	bf00      	nop
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	e000ed00 	.word	0xe000ed00
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	24003010 	.word	0x24003010

08008cec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	490e      	ldr	r1, [pc, #56]	; (8008d2c <MX_USB_HOST_Init+0x40>)
 8008cf4:	480e      	ldr	r0, [pc, #56]	; (8008d30 <MX_USB_HOST_Init+0x44>)
 8008cf6:	f7fd feaf 	bl	8006a58 <USBH_Init>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d00:	f7ff fd68 	bl	80087d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d04:	490b      	ldr	r1, [pc, #44]	; (8008d34 <MX_USB_HOST_Init+0x48>)
 8008d06:	480a      	ldr	r0, [pc, #40]	; (8008d30 <MX_USB_HOST_Init+0x44>)
 8008d08:	f7fd ff19 	bl	8006b3e <USBH_RegisterClass>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d12:	f7ff fd5f 	bl	80087d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d16:	4806      	ldr	r0, [pc, #24]	; (8008d30 <MX_USB_HOST_Init+0x44>)
 8008d18:	f7fd ff9e 	bl	8006c58 <USBH_Start>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d22:	f7ff fd57 	bl	80087d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	08008d4d 	.word	0x08008d4d
 8008d30:	20000290 	.word	0x20000290
 8008d34:	20000008 	.word	0x20000008

08008d38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d3c:	4802      	ldr	r0, [pc, #8]	; (8008d48 <MX_USB_HOST_Process+0x10>)
 8008d3e:	f7fd ff9b 	bl	8006c78 <USBH_Process>
}
 8008d42:	bf00      	nop
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000290 	.word	0x20000290

08008d4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d819      	bhi.n	8008d94 <USBH_UserProcess+0x48>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <USBH_UserProcess+0x1c>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d95 	.word	0x08008d95
 8008d6c:	08008d85 	.word	0x08008d85
 8008d70:	08008d95 	.word	0x08008d95
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008d7d 	.word	0x08008d7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d7c:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <USBH_UserProcess+0x58>)
 8008d7e:	2203      	movs	r2, #3
 8008d80:	701a      	strb	r2, [r3, #0]
  break;
 8008d82:	e008      	b.n	8008d96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <USBH_UserProcess+0x58>)
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
  break;
 8008d8a:	e004      	b.n	8008d96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <USBH_UserProcess+0x58>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
  break;
 8008d92:	e000      	b.n	8008d96 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	200000bc 	.word	0x200000bc

08008da8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dc8:	d147      	bne.n	8008e5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	4b25      	ldr	r3, [pc, #148]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	4a24      	ldr	r2, [pc, #144]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dda:	4b22      	ldr	r3, [pc, #136]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4619      	mov	r1, r3
 8008dfa:	481b      	ldr	r0, [pc, #108]	; (8008e68 <HAL_HCD_MspInit+0xc0>)
 8008dfc:	f7f7 fd2c 	bl	8000858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e06:	2302      	movs	r3, #2
 8008e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e12:	230a      	movs	r3, #10
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e16:	f107 0314 	add.w	r3, r7, #20
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4812      	ldr	r0, [pc, #72]	; (8008e68 <HAL_HCD_MspInit+0xc0>)
 8008e1e:	f7f7 fd1b 	bl	8000858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	4a0f      	ldr	r2, [pc, #60]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2c:	6353      	str	r3, [r2, #52]	; 0x34
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e36:	4a0b      	ldr	r2, [pc, #44]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	2043      	movs	r0, #67	; 0x43
 8008e50:	f7f7 fca9 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e54:	2043      	movs	r0, #67	; 0x43
 8008e56:	f7f7 fcc2 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	40023800 	.word	0x40023800
 8008e68:	40020000 	.word	0x40020000

08008e6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe f9ad 	bl	80071da <USBH_LL_IncTimer>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe f9f2 	bl	8007280 <USBH_LL_Connect>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fa0a 	bl	80072cc <USBH_LL_Disconnect>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe f99f 	bl	800722e <USBH_LL_PortEnabled>
} 
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f99f 	bl	800724a <USBH_LL_PortDisabled>
} 
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d12a      	bne.n	8008f7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f40:	2208      	movs	r2, #8
 8008f42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f44:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f50:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f52:	2202      	movs	r2, #2
 8008f54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f5c:	480a      	ldr	r0, [pc, #40]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f5e:	f7f7 fe61 	bl	8000c24 <HAL_HCD_Init>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f68:	f7ff fc34 	bl	80087d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f6c:	4806      	ldr	r0, [pc, #24]	; (8008f88 <USBH_LL_Init+0x74>)
 8008f6e:	f7f8 fa5d 	bl	800142c <HAL_HCD_GetCurrentFrame>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe f920 	bl	80071bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000065c 	.word	0x2000065c

08008f8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f8 f9ca 	bl	800133c <HAL_HCD_Start>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f954 	bl	800925c <USBH_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f8 f9d2 	bl	8001382 <HAL_HCD_Stop>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f939 	bl	800925c <USBH_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800900a:	4618      	mov	r0, r3
 800900c:	f7f8 fa1c 	bl	8001448 <HAL_HCD_GetCurrentSpeed>
 8009010:	4603      	mov	r3, r0
 8009012:	2b01      	cmp	r3, #1
 8009014:	d007      	beq.n	8009026 <USBH_LL_GetSpeed+0x2e>
 8009016:	2b01      	cmp	r3, #1
 8009018:	d302      	bcc.n	8009020 <USBH_LL_GetSpeed+0x28>
 800901a:	2b02      	cmp	r3, #2
 800901c:	d006      	beq.n	800902c <USBH_LL_GetSpeed+0x34>
 800901e:	e008      	b.n	8009032 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
    break;
 8009024:	e008      	b.n	8009038 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009026:	2301      	movs	r3, #1
 8009028:	73fb      	strb	r3, [r7, #15]
    break;
 800902a:	e005      	b.n	8009038 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800902c:	2302      	movs	r3, #2
 800902e:	73fb      	strb	r3, [r7, #15]
    break;
 8009030:	e002      	b.n	8009038 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009032:	2301      	movs	r3, #1
 8009034:	73fb      	strb	r3, [r7, #15]
    break;
 8009036:	bf00      	nop
  }
  return  speed;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009058:	4618      	mov	r0, r3
 800905a:	f7f8 f9af 	bl	80013bc <HAL_HCD_ResetPort>
 800905e:	4603      	mov	r3, r0
 8009060:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	4618      	mov	r0, r3
 8009066:	f000 f8f9 	bl	800925c <USBH_Get_USB_Status>
 800906a:	4603      	mov	r3, r0
 800906c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800906e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7f8 f9b7 	bl	8001402 <HAL_HCD_HC_GetXferCount>
 8009094:	4603      	mov	r3, r0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800909e:	b590      	push	{r4, r7, lr}
 80090a0:	b089      	sub	sp, #36	; 0x24
 80090a2:	af04      	add	r7, sp, #16
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	461a      	mov	r2, r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	70fb      	strb	r3, [r7, #3]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70bb      	strb	r3, [r7, #2]
 80090b4:	4613      	mov	r3, r2
 80090b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80090c6:	787c      	ldrb	r4, [r7, #1]
 80090c8:	78ba      	ldrb	r2, [r7, #2]
 80090ca:	78f9      	ldrb	r1, [r7, #3]
 80090cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	4623      	mov	r3, r4
 80090de:	f7f7 fe03 	bl	8000ce8 <HAL_HCD_HC_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f8b7 	bl	800925c <USBH_Get_USB_Status>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}

080090fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7f7 fe7c 	bl	8000e18 <HAL_HCD_HC_Halt>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f898 	bl	800925c <USBH_Get_USB_Status>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800913a:	b590      	push	{r4, r7, lr}
 800913c:	b089      	sub	sp, #36	; 0x24
 800913e:	af04      	add	r7, sp, #16
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	4608      	mov	r0, r1
 8009144:	4611      	mov	r1, r2
 8009146:	461a      	mov	r2, r3
 8009148:	4603      	mov	r3, r0
 800914a:	70fb      	strb	r3, [r7, #3]
 800914c:	460b      	mov	r3, r1
 800914e:	70bb      	strb	r3, [r7, #2]
 8009150:	4613      	mov	r3, r2
 8009152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009162:	787c      	ldrb	r4, [r7, #1]
 8009164:	78ba      	ldrb	r2, [r7, #2]
 8009166:	78f9      	ldrb	r1, [r7, #3]
 8009168:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800916c:	9303      	str	r3, [sp, #12]
 800916e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	4623      	mov	r3, r4
 800917e:	f7f7 fe6f 	bl	8000e60 <HAL_HCD_HC_SubmitRequest>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f867 	bl	800925c <USBH_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009192:	7bbb      	ldrb	r3, [r7, #14]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f8 f910 	bl	80013d8 <HAL_HCD_HC_GetURBState>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80091ce:	20c8      	movs	r0, #200	; 0xc8
 80091d0:	f7f7 f9ec 	bl	80005ac <HAL_Delay>
  return USBH_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
 80091ea:	4613      	mov	r3, r2
 80091ec:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091f4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	68f9      	ldr	r1, [r7, #12]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	440b      	add	r3, r1
 8009204:	333b      	adds	r3, #59	; 0x3b
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	440b      	add	r3, r1
 800921a:	3350      	adds	r3, #80	; 0x50
 800921c:	78ba      	ldrb	r2, [r7, #2]
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	e009      	b.n	8009236 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	440b      	add	r3, r1
 8009230:	3351      	adds	r3, #81	; 0x51
 8009232:	78ba      	ldrb	r2, [r7, #2]
 8009234:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7f7 f9ad 	bl	80005ac <HAL_Delay>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d817      	bhi.n	80092a0 <USBH_Get_USB_Status+0x44>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <USBH_Get_USB_Status+0x1c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	08009289 	.word	0x08009289
 800927c:	0800928f 	.word	0x0800928f
 8009280:	08009295 	.word	0x08009295
 8009284:	0800929b 	.word	0x0800929b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	e00b      	b.n	80092a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800928e:	2302      	movs	r3, #2
 8009290:	73fb      	strb	r3, [r7, #15]
    break;
 8009292:	e008      	b.n	80092a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009294:	2301      	movs	r3, #1
 8009296:	73fb      	strb	r3, [r7, #15]
    break;
 8009298:	e005      	b.n	80092a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	73fb      	strb	r3, [r7, #15]
    break;
 800929e:	e002      	b.n	80092a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092a0:	2302      	movs	r3, #2
 80092a2:	73fb      	strb	r3, [r7, #15]
    break;
 80092a4:	bf00      	nop
  }
  return usb_status;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80092b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80092b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80092ba:	e003      	b.n	80092c4 <LoopCopyDataInit>

080092bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80092be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80092c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80092c2:	3104      	adds	r1, #4

080092c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80092c4:	480b      	ldr	r0, [pc, #44]	; (80092f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80092c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80092ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80092cc:	d3f6      	bcc.n	80092bc <CopyDataInit>
  ldr  r2, =_sbss
 80092ce:	4a0b      	ldr	r2, [pc, #44]	; (80092fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80092d0:	e002      	b.n	80092d8 <LoopFillZerobss>

080092d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80092d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80092d4:	f842 3b04 	str.w	r3, [r2], #4

080092d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80092da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80092dc:	d3f9      	bcc.n	80092d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80092de:	f7ff fccf 	bl	8008c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092e2:	f000 f817 	bl	8009314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092e6:	f7fe fe55 	bl	8007f94 <main>
  bx  lr    
 80092ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80092ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80092f0:	08009544 	.word	0x08009544
  ldr  r0, =_sdata
 80092f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80092f8:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80092fc:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8009300:	20000924 	.word	0x20000924

08009304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009304:	e7fe      	b.n	8009304 <ADC_IRQHandler>
	...

08009308 <__errno>:
 8009308:	4b01      	ldr	r3, [pc, #4]	; (8009310 <__errno+0x8>)
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000034 	.word	0x20000034

08009314 <__libc_init_array>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4e0d      	ldr	r6, [pc, #52]	; (800934c <__libc_init_array+0x38>)
 8009318:	4c0d      	ldr	r4, [pc, #52]	; (8009350 <__libc_init_array+0x3c>)
 800931a:	1ba4      	subs	r4, r4, r6
 800931c:	10a4      	asrs	r4, r4, #2
 800931e:	2500      	movs	r5, #0
 8009320:	42a5      	cmp	r5, r4
 8009322:	d109      	bne.n	8009338 <__libc_init_array+0x24>
 8009324:	4e0b      	ldr	r6, [pc, #44]	; (8009354 <__libc_init_array+0x40>)
 8009326:	4c0c      	ldr	r4, [pc, #48]	; (8009358 <__libc_init_array+0x44>)
 8009328:	f000 f8ea 	bl	8009500 <_init>
 800932c:	1ba4      	subs	r4, r4, r6
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	2500      	movs	r5, #0
 8009332:	42a5      	cmp	r5, r4
 8009334:	d105      	bne.n	8009342 <__libc_init_array+0x2e>
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800933c:	4798      	blx	r3
 800933e:	3501      	adds	r5, #1
 8009340:	e7ee      	b.n	8009320 <__libc_init_array+0xc>
 8009342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009346:	4798      	blx	r3
 8009348:	3501      	adds	r5, #1
 800934a:	e7f2      	b.n	8009332 <__libc_init_array+0x1e>
 800934c:	0800953c 	.word	0x0800953c
 8009350:	0800953c 	.word	0x0800953c
 8009354:	0800953c 	.word	0x0800953c
 8009358:	08009540 	.word	0x08009540

0800935c <malloc>:
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <malloc+0xc>)
 800935e:	4601      	mov	r1, r0
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	f000 b861 	b.w	8009428 <_malloc_r>
 8009366:	bf00      	nop
 8009368:	20000034 	.word	0x20000034

0800936c <free>:
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <free+0xc>)
 800936e:	4601      	mov	r1, r0
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f000 b80b 	b.w	800938c <_free_r>
 8009376:	bf00      	nop
 8009378:	20000034 	.word	0x20000034

0800937c <memset>:
 800937c:	4402      	add	r2, r0
 800937e:	4603      	mov	r3, r0
 8009380:	4293      	cmp	r3, r2
 8009382:	d100      	bne.n	8009386 <memset+0xa>
 8009384:	4770      	bx	lr
 8009386:	f803 1b01 	strb.w	r1, [r3], #1
 800938a:	e7f9      	b.n	8009380 <memset+0x4>

0800938c <_free_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4605      	mov	r5, r0
 8009390:	2900      	cmp	r1, #0
 8009392:	d045      	beq.n	8009420 <_free_r+0x94>
 8009394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009398:	1f0c      	subs	r4, r1, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	bfb8      	it	lt
 800939e:	18e4      	addlt	r4, r4, r3
 80093a0:	f000 f8ac 	bl	80094fc <__malloc_lock>
 80093a4:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <_free_r+0x98>)
 80093a6:	6813      	ldr	r3, [r2, #0]
 80093a8:	4610      	mov	r0, r2
 80093aa:	b933      	cbnz	r3, 80093ba <_free_r+0x2e>
 80093ac:	6063      	str	r3, [r4, #4]
 80093ae:	6014      	str	r4, [r2, #0]
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b6:	f000 b8a2 	b.w	80094fe <__malloc_unlock>
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	d90c      	bls.n	80093d8 <_free_r+0x4c>
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	1862      	adds	r2, r4, r1
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bf04      	itt	eq
 80093c6:	681a      	ldreq	r2, [r3, #0]
 80093c8:	685b      	ldreq	r3, [r3, #4]
 80093ca:	6063      	str	r3, [r4, #4]
 80093cc:	bf04      	itt	eq
 80093ce:	1852      	addeq	r2, r2, r1
 80093d0:	6022      	streq	r2, [r4, #0]
 80093d2:	6004      	str	r4, [r0, #0]
 80093d4:	e7ec      	b.n	80093b0 <_free_r+0x24>
 80093d6:	4613      	mov	r3, r2
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	b10a      	cbz	r2, 80093e0 <_free_r+0x54>
 80093dc:	42a2      	cmp	r2, r4
 80093de:	d9fa      	bls.n	80093d6 <_free_r+0x4a>
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	1858      	adds	r0, r3, r1
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d10b      	bne.n	8009400 <_free_r+0x74>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	4401      	add	r1, r0
 80093ec:	1858      	adds	r0, r3, r1
 80093ee:	4282      	cmp	r2, r0
 80093f0:	6019      	str	r1, [r3, #0]
 80093f2:	d1dd      	bne.n	80093b0 <_free_r+0x24>
 80093f4:	6810      	ldr	r0, [r2, #0]
 80093f6:	6852      	ldr	r2, [r2, #4]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	4401      	add	r1, r0
 80093fc:	6019      	str	r1, [r3, #0]
 80093fe:	e7d7      	b.n	80093b0 <_free_r+0x24>
 8009400:	d902      	bls.n	8009408 <_free_r+0x7c>
 8009402:	230c      	movs	r3, #12
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	e7d3      	b.n	80093b0 <_free_r+0x24>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	1821      	adds	r1, r4, r0
 800940c:	428a      	cmp	r2, r1
 800940e:	bf04      	itt	eq
 8009410:	6811      	ldreq	r1, [r2, #0]
 8009412:	6852      	ldreq	r2, [r2, #4]
 8009414:	6062      	str	r2, [r4, #4]
 8009416:	bf04      	itt	eq
 8009418:	1809      	addeq	r1, r1, r0
 800941a:	6021      	streq	r1, [r4, #0]
 800941c:	605c      	str	r4, [r3, #4]
 800941e:	e7c7      	b.n	80093b0 <_free_r+0x24>
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop
 8009424:	200000c0 	.word	0x200000c0

08009428 <_malloc_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	1ccd      	adds	r5, r1, #3
 800942c:	f025 0503 	bic.w	r5, r5, #3
 8009430:	3508      	adds	r5, #8
 8009432:	2d0c      	cmp	r5, #12
 8009434:	bf38      	it	cc
 8009436:	250c      	movcc	r5, #12
 8009438:	2d00      	cmp	r5, #0
 800943a:	4606      	mov	r6, r0
 800943c:	db01      	blt.n	8009442 <_malloc_r+0x1a>
 800943e:	42a9      	cmp	r1, r5
 8009440:	d903      	bls.n	800944a <_malloc_r+0x22>
 8009442:	230c      	movs	r3, #12
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	2000      	movs	r0, #0
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	f000 f857 	bl	80094fc <__malloc_lock>
 800944e:	4a21      	ldr	r2, [pc, #132]	; (80094d4 <_malloc_r+0xac>)
 8009450:	6814      	ldr	r4, [r2, #0]
 8009452:	4621      	mov	r1, r4
 8009454:	b991      	cbnz	r1, 800947c <_malloc_r+0x54>
 8009456:	4c20      	ldr	r4, [pc, #128]	; (80094d8 <_malloc_r+0xb0>)
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	b91b      	cbnz	r3, 8009464 <_malloc_r+0x3c>
 800945c:	4630      	mov	r0, r6
 800945e:	f000 f83d 	bl	80094dc <_sbrk_r>
 8009462:	6020      	str	r0, [r4, #0]
 8009464:	4629      	mov	r1, r5
 8009466:	4630      	mov	r0, r6
 8009468:	f000 f838 	bl	80094dc <_sbrk_r>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d124      	bne.n	80094ba <_malloc_r+0x92>
 8009470:	230c      	movs	r3, #12
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	4630      	mov	r0, r6
 8009476:	f000 f842 	bl	80094fe <__malloc_unlock>
 800947a:	e7e4      	b.n	8009446 <_malloc_r+0x1e>
 800947c:	680b      	ldr	r3, [r1, #0]
 800947e:	1b5b      	subs	r3, r3, r5
 8009480:	d418      	bmi.n	80094b4 <_malloc_r+0x8c>
 8009482:	2b0b      	cmp	r3, #11
 8009484:	d90f      	bls.n	80094a6 <_malloc_r+0x7e>
 8009486:	600b      	str	r3, [r1, #0]
 8009488:	50cd      	str	r5, [r1, r3]
 800948a:	18cc      	adds	r4, r1, r3
 800948c:	4630      	mov	r0, r6
 800948e:	f000 f836 	bl	80094fe <__malloc_unlock>
 8009492:	f104 000b 	add.w	r0, r4, #11
 8009496:	1d23      	adds	r3, r4, #4
 8009498:	f020 0007 	bic.w	r0, r0, #7
 800949c:	1ac3      	subs	r3, r0, r3
 800949e:	d0d3      	beq.n	8009448 <_malloc_r+0x20>
 80094a0:	425a      	negs	r2, r3
 80094a2:	50e2      	str	r2, [r4, r3]
 80094a4:	e7d0      	b.n	8009448 <_malloc_r+0x20>
 80094a6:	428c      	cmp	r4, r1
 80094a8:	684b      	ldr	r3, [r1, #4]
 80094aa:	bf16      	itet	ne
 80094ac:	6063      	strne	r3, [r4, #4]
 80094ae:	6013      	streq	r3, [r2, #0]
 80094b0:	460c      	movne	r4, r1
 80094b2:	e7eb      	b.n	800948c <_malloc_r+0x64>
 80094b4:	460c      	mov	r4, r1
 80094b6:	6849      	ldr	r1, [r1, #4]
 80094b8:	e7cc      	b.n	8009454 <_malloc_r+0x2c>
 80094ba:	1cc4      	adds	r4, r0, #3
 80094bc:	f024 0403 	bic.w	r4, r4, #3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d005      	beq.n	80094d0 <_malloc_r+0xa8>
 80094c4:	1a21      	subs	r1, r4, r0
 80094c6:	4630      	mov	r0, r6
 80094c8:	f000 f808 	bl	80094dc <_sbrk_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0cf      	beq.n	8009470 <_malloc_r+0x48>
 80094d0:	6025      	str	r5, [r4, #0]
 80094d2:	e7db      	b.n	800948c <_malloc_r+0x64>
 80094d4:	200000c0 	.word	0x200000c0
 80094d8:	200000c4 	.word	0x200000c4

080094dc <_sbrk_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4c06      	ldr	r4, [pc, #24]	; (80094f8 <_sbrk_r+0x1c>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4605      	mov	r5, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	f7ff fb9e 	bl	8008c28 <_sbrk>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_sbrk_r+0x1a>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_sbrk_r+0x1a>
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20000920 	.word	0x20000920

080094fc <__malloc_lock>:
 80094fc:	4770      	bx	lr

080094fe <__malloc_unlock>:
 80094fe:	4770      	bx	lr

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
